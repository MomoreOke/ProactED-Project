using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using FEENALOoFINALE.Data;
using FEENALOoFINALE.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace FEENALOoFINALE.Controllers
{
    [Authorize]
    public class AlertController : Controller
    {
        private readonly ApplicationDbContext _context;

        public AlertController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: Alert
        public async Task<IActionResult> Index()
        {
            return View(await _context.Alerts
                .Include(a => a.Equipment) // Changed from a.EquipmentName
                .Include(a => a.AssignedTo)
                .OrderByDescending(a => a.CreatedDate)
                .ToListAsync());
        }

        // GET: Alert/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var alert = await _context.Alerts
                .Include(a => a.Equipment) // Changed from a.EquipmentName
                .Include(a => a.AssignedTo)
                .FirstOrDefaultAsync(m => m.AlertId == id);

            if (alert == null)
            {
                return NotFound();
            }

            return View(alert);
        }

        // GET: Alert/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var alert = await _context.Alerts
                .Include(a => a.Equipment) // Changed from a.EquipmentName
                .Include(a => a.AssignedTo)
                .FirstOrDefaultAsync(m => m.AlertId == id);
            if (alert == null)
            {
                return NotFound();
            }

            return View(alert);
        }

        // POST: Alert/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var alert = await _context.Alerts.FindAsync(id);
            if (alert != null)
            {
                _context.Alerts.Remove(alert);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Index));
        }

        public IActionResult Resolve(int id)
        {
            // Optionally, you can check if the alert exists and is unresolved
            var alert = _context.Alerts.Find(id);
            if (alert == null)
            {
                return NotFound();
            }
            // Redirect to MaintenanceLog/Create, passing the EquipmentId (or AlertId if you want)
            return RedirectToAction("Create", "MaintenanceLog", new { equipmentId = alert.EquipmentId, alertId = id });
        }

        public async Task<IActionResult> MarkInProgress(int id)
        {
            var alert = await _context.Alerts.FindAsync(id);
            if (alert == null)
                return NotFound();

            alert.Status = AlertStatus.InProgress;
            _context.Update(alert);
            await _context.SaveChangesAsync();

            return RedirectToAction(nameof(Index));
        }

        // Temporary method to clear auto-generated alerts
        [HttpPost]
        public async Task<IActionResult> ClearAutoGeneratedAlerts()
        {
            try
            {
                // Remove all auto-generated alerts (those with generic titles/descriptions indicating auto-generation)
                var autoGeneratedAlerts = await _context.Alerts
                    .Where(a => (a.Title != null && (a.Title.Contains("overdue maintenance") || 
                               a.Title.Contains("Equipment Status Alert"))) ||
                               (a.Description != null && (a.Description.Contains("automatically generated") ||
                               a.Description.Contains("has been inactive") ||
                               a.Description.Contains("overdue for maintenance"))))
                    .ToListAsync();

                // Remove auto-generated maintenance tasks linked to these alerts
                var linkedTaskIds = autoGeneratedAlerts.Select(a => a.AlertId).ToList();
                var autoGeneratedTasks = await _context.MaintenanceTasks
                    .Where(mt => mt.CreatedFromAlertId != null && 
                                linkedTaskIds.Contains(mt.CreatedFromAlertId.Value))
                    .ToListAsync();

                // Also remove unlinked auto-generated tasks (those with generic descriptions)
                var otherAutoTasks = await _context.MaintenanceTasks
                    .Where(mt => mt.Description != null && (mt.Description.Contains("Address Alert:") ||
                               mt.Description.Contains("Perform overdue maintenance") ||
                               mt.Description.Contains("Investigate equipment status")))
                    .ToListAsync();

                _context.MaintenanceTasks.RemoveRange(autoGeneratedTasks);
                _context.MaintenanceTasks.RemoveRange(otherAutoTasks);
                _context.Alerts.RemoveRange(autoGeneratedAlerts);
                await _context.SaveChangesAsync();

                var totalTasks = autoGeneratedTasks.Count + otherAutoTasks.Count;
                TempData["SuccessMessage"] = $"Cleared {autoGeneratedAlerts.Count} auto-generated alerts and {totalTasks} auto-generated tasks.";
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = $"Error clearing alerts: {ex.Message}";
                return RedirectToAction("Index");
            }
        }

        // Debug method to see all alerts and their content
        [HttpGet]
        public async Task<IActionResult> DebugAlerts()
        {
            var alerts = await _context.Alerts.ToListAsync();
            var alertInfo = alerts.Select(a => new 
            {
                Id = a.AlertId,
                Title = a.Title ?? "NULL",
                Description = a.Description ?? "NULL",
                CreatedDate = a.CreatedDate
            }).ToList();

            ViewBag.AlertInfo = alertInfo;
            return View();
        }

        // Enhanced clear method with broader criteria (fixed for EF Core LINQ)
        [HttpPost]
        public async Task<IActionResult> ClearAllAutoGeneratedAlerts()
        {
            try
            {
                // Remove all auto-generated alerts (case-insensitive, using ToLower for EF Core compatibility)
                var autoGeneratedAlerts = await _context.Alerts
                    .Where(a =>
                        (!string.IsNullOrEmpty(a.Title) && (
                            a.Title.ToLower().Contains("overdue maintenance") ||
                            a.Title.ToLower().Contains("equipment status alert") ||
                            a.Title.ToLower().Contains("equipment became inactive") ||
                            a.Title.ToLower().Contains("equipment retired") ||
                            a.Title.ToLower().Contains("equipment restored") ||
                            a.Title.ToLower().Contains("maintenance overdue")
                        )) ||
                        (!string.IsNullOrEmpty(a.Description) && (
                            a.Description.ToLower().Contains("automatically generated") ||
                            a.Description.ToLower().Contains("has been inactive") ||
                            a.Description.ToLower().Contains("overdue for maintenance") ||
                            a.Description.ToLower().Contains("changed from active to inactive") ||
                            a.Description.ToLower().Contains("has not received maintenance") ||
                            a.Description.ToLower().Contains("recommended maintenance interval")
                        )) ||
                        (a.CreatedDate.Date == DateTime.Today && string.IsNullOrEmpty(a.AssignedToUserId))
                    )
                    .ToListAsync();

                // Remove auto-generated maintenance tasks linked to these alerts
                var linkedTaskIds = autoGeneratedAlerts.Select(a => a.AlertId).ToList();
                var autoGeneratedTasks = await _context.MaintenanceTasks
                    .Where(mt => mt.CreatedFromAlertId != null &&
                                linkedTaskIds.Contains(mt.CreatedFromAlertId.Value))
                    .ToListAsync();

                // Also remove unlinked auto-generated tasks (those with generic descriptions)
                var otherAutoTasks = await _context.MaintenanceTasks
                    .Where(mt => !string.IsNullOrEmpty(mt.Description) && (
                        mt.Description.ToLower().Contains("address alert:") ||
                        mt.Description.ToLower().Contains("perform overdue maintenance") ||
                        mt.Description.ToLower().Contains("investigate equipment status")
                    ))
                    .ToListAsync();

                if (autoGeneratedTasks.Any())
                    _context.MaintenanceTasks.RemoveRange(autoGeneratedTasks);
                if (otherAutoTasks.Any())
                    _context.MaintenanceTasks.RemoveRange(otherAutoTasks);
                if (autoGeneratedAlerts.Any())
                    _context.Alerts.RemoveRange(autoGeneratedAlerts);

                await _context.SaveChangesAsync();

                var totalTasks = autoGeneratedTasks.Count + otherAutoTasks.Count;
                TempData["SuccessMessage"] = $"Cleared {autoGeneratedAlerts.Count} auto-generated alerts and {totalTasks} auto-generated tasks.";
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = $"Error clearing alerts: {ex.Message}";
                return RedirectToAction("Index");
            }
        }

        private bool AlertExists(int id)
        {
            return _context.Alerts.Any(e => e.AlertId == id);
        }

        // Nuclear option - clear ALL alerts and maintenance tasks (for testing)
        [HttpPost]
        public async Task<IActionResult> ClearAllAlerts()
        {
            try
            {
                // Remove ALL maintenance tasks first (to avoid foreign key issues)
                var allTasks = await _context.MaintenanceTasks.ToListAsync();
                if (allTasks.Any())
                {
                    _context.MaintenanceTasks.RemoveRange(allTasks);
                }

                // Remove ALL alerts
                var allAlerts = await _context.Alerts.ToListAsync();
                if (allAlerts.Any())
                {
                    _context.Alerts.RemoveRange(allAlerts);
                }

                await _context.SaveChangesAsync();

                TempData["SuccessMessage"] = $"Cleared ALL {allAlerts.Count} alerts and {allTasks.Count} maintenance tasks from the database.";
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = $"Error clearing all alerts: {ex.Message}";
                return RedirectToAction("Index");
            }
        }

        // Test method to show what would be cleared without actually clearing
        [HttpGet]
        public async Task<IActionResult> TestClearCriteria()
        {
            try
            {
                // Get ALL alerts to examine them
                var allAlerts = await _context.Alerts.ToListAsync();
                
                // Identify auto-generated alerts by multiple criteria
                var autoGeneratedAlerts = allAlerts.Where(a => 
                    // Title-based detection
                    (!string.IsNullOrEmpty(a.Title) && (
                        a.Title.Contains("overdue maintenance", StringComparison.OrdinalIgnoreCase) ||
                        a.Title.Contains("Equipment Status Alert", StringComparison.OrdinalIgnoreCase) ||
                        a.Title.Contains("Equipment Became Inactive", StringComparison.OrdinalIgnoreCase) ||
                        a.Title.Contains("Equipment Retired", StringComparison.OrdinalIgnoreCase) ||
                        a.Title.Contains("Equipment Restored", StringComparison.OrdinalIgnoreCase) ||
                        a.Title.Contains("Maintenance Overdue", StringComparison.OrdinalIgnoreCase)
                    )) ||
                    // Description-based detection
                    (!string.IsNullOrEmpty(a.Description) && (
                        a.Description.Contains("automatically generated", StringComparison.OrdinalIgnoreCase) ||
                        a.Description.Contains("has been inactive", StringComparison.OrdinalIgnoreCase) ||
                        a.Description.Contains("overdue for maintenance", StringComparison.OrdinalIgnoreCase) ||
                        a.Description.Contains("changed from Active to Inactive", StringComparison.OrdinalIgnoreCase) ||
                        a.Description.Contains("has not received maintenance", StringComparison.OrdinalIgnoreCase) ||
                        a.Description.Contains("Recommended maintenance interval", StringComparison.OrdinalIgnoreCase)
                    )) ||
                    // Date-based detection (created today by automated processes)
                    (a.CreatedDate.Date == DateTime.Today && string.IsNullOrEmpty(a.AssignedToUserId))
                ).ToList();

                var testResults = allAlerts.Select(a => new {
                    Id = a.AlertId,
                    Title = a.Title ?? "NULL",
                    Description = a.Description ?? "NULL",
                    CreatedDate = a.CreatedDate,
                    AssignedToUserId = a.AssignedToUserId ?? "NULL",
                    WouldBeCleared = autoGeneratedAlerts.Any(auto => auto.AlertId == a.AlertId)
                }).ToList();

                ViewBag.TestResults = testResults;
                ViewBag.TotalAlerts = allAlerts.Count;
                ViewBag.WouldClear = autoGeneratedAlerts.Count;
                
                return View();
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = $"Error testing clear criteria: {ex.Message}";
                return RedirectToAction("Index");
            }
        }

        // Raw SQL cleanup method for stubborn auto-generated data
        [HttpPost]
        public async Task<IActionResult> SqlCleanupAutoGenerated()
        {
            try
            {
                // Count before cleanup
                var alertCountBefore = await _context.Alerts.CountAsync();
                var taskCountBefore = await _context.MaintenanceTasks.CountAsync();

                // Use raw SQL to delete auto-generated maintenance tasks first
                await _context.Database.ExecuteSqlRawAsync(@"
                    DELETE FROM MaintenanceTasks 
                    WHERE Description LIKE '%Address Alert:%' 
                       OR Description LIKE '%Perform overdue maintenance%'
                       OR Description LIKE '%Investigate equipment status%'
                       OR CreatedFromAlertId IS NOT NULL
                ");

                // Use raw SQL to delete auto-generated alerts
                await _context.Database.ExecuteSqlRawAsync(@"
                    DELETE FROM Alerts 
                    WHERE Title LIKE '%overdue maintenance%' 
                       OR Title LIKE '%Equipment Status Alert%'
                       OR Title LIKE '%Equipment Became Inactive%'
                       OR Title LIKE '%Equipment Retired%'
                       OR Title LIKE '%Equipment Restored%'
                       OR Title LIKE '%Maintenance Overdue%'
                       OR Description LIKE '%automatically generated%'
                       OR Description LIKE '%has been inactive%'
                       OR Description LIKE '%overdue for maintenance%'
                       OR Description LIKE '%changed from Active to Inactive%'
                       OR Description LIKE '%has not received maintenance%'
                       OR Description LIKE '%Recommended maintenance interval%'
                       OR (CAST(CreatedDate AS DATE) = CAST(GETDATE() AS DATE) AND AssignedToUserId IS NULL)
                ");

                // Count after cleanup
                var alertCountAfter = await _context.Alerts.CountAsync();
                var taskCountAfter = await _context.MaintenanceTasks.CountAsync();

                var alertsCleared = alertCountBefore - alertCountAfter;
                var tasksCleared = taskCountBefore - taskCountAfter;

                TempData["SuccessMessage"] = $"SQL Cleanup completed: {alertsCleared} alerts and {tasksCleared} tasks removed.";
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = $"Error during SQL cleanup: {ex.Message}";
                return RedirectToAction("Index");
            }
        }
    }
}