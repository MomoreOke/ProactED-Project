using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using FEENALOoFINALE.Data;
using FEENALOoFINALE.Models; // Ensures MaintenanceTask and MaintenanceStatus enum are in scope
using FEENALOoFINALE.Models.ViewModels; // Add new ViewModels
using FEENALOoFINALE.Hubs; // Add SignalR Hub
using FEENALOoFINALE.Services; // Add Services namespace
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.SignalR; // Add SignalR services
using Microsoft.AspNetCore.Identity;
using System.Text.Json;

namespace FEENALOoFINALE.Controllers
{
    [Authorize]
    public class DashboardController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly IHubContext<MaintenanceHub>? _hubContext;
        private readonly UserManager<User> _userManager;
        private readonly IAdvancedAnalyticsService _analyticsService;

        public DashboardController(
            ApplicationDbContext context, 
            IHubContext<MaintenanceHub>? hubContext, 
            UserManager<User> userManager, 
            IAdvancedAnalyticsService analyticsService)
        {
            _context = context;
            _hubContext = hubContext;
            _userManager = userManager;
            _analyticsService = analyticsService;
        }

        // Index method with performance tracking
        public async Task<IActionResult> Index(DashboardFilterViewModel? filters = null)
        {
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            
            try
            {
                var result = await LegacyIndexOptimized(filters);
                
                stopwatch.Stop();
                
                // Add performance data to ViewBag for display
                ViewBag.LoadTimeMs = stopwatch.ElapsedMilliseconds;
                ViewBag.OptimizationStatus = "Performance Enhanced";
                
                return result;
            }
            catch (Exception ex)
            {
                stopwatch.Stop();
                Console.WriteLine($"Dashboard error: {ex.Message}");
                return await LegacyIndex(filters);
            }
        }

        // Keep the original method as a fallback
        public async Task<IActionResult> LegacyIndex(DashboardFilterViewModel? filters = null)
        {
            var currentUser = await _userManager.GetUserAsync(User);
            var currentUserId = currentUser?.Id ?? "";

            // Initialize filters if null or apply defaults
            filters ??= new DashboardFilterViewModel();

            // Load saved views for the current user
            var savedViews = await _context.SavedDashboardViews
                .Where(v => v.UserId == currentUserId || v.IsPublic)
                .OrderBy(v => v.Name)
                .ToListAsync();

            // Get filter options
            var filterOptions = new DashboardFilterOptions
            {
                Buildings = await _context.Buildings.OrderBy(b => b.BuildingName).ToListAsync(),
                EquipmentTypes = await _context.EquipmentTypes.OrderBy(et => et.EquipmentTypeName).ToListAsync(),
                Users = await _userManager.Users.OrderBy(u => u.UserName).ToListAsync(),
                SavedViews = savedViews
            };

            // Apply filters to get dashboard data
            var dashboardData = await GetFilteredDashboardData(filters);

            var viewModel = new FEENALOoFINALE.Models.EnhancedDashboardViewModel
            {
                TotalEquipment = dashboardData.TotalEquipment,
                CriticalAlerts = dashboardData.CriticalAlerts,
                ActiveMaintenanceTasks = dashboardData.ActiveMaintenanceTasks,
                OverdueMaintenances = dashboardData.OverdueMaintenances,
                EquipmentNeedingAttention = dashboardData.EquipmentNeedingAttention,
                LowStockItems = dashboardData.LowStockItems,
                ActiveAlerts = dashboardData.ActiveAlerts,
                PendingTasks = dashboardData.PendingTasks,
                InProgressTasks = dashboardData.InProgressTasks,
                ResolvedToday = dashboardData.ResolvedToday,
                AutoGeneratedTasks = dashboardData.AutoGeneratedTasks,
                RecentAlerts = dashboardData.RecentAlerts,
                UpcomingMaintenances = dashboardData.UpcomingMaintenances,
                CriticalEquipment = dashboardData.CriticalEquipment,
                EquipmentStatus = dashboardData.EquipmentStatus,
                SuggestedActions = dashboardData.SuggestedActions,
                TotalRecordsBeforeFilter = dashboardData.TotalRecordsBeforeFilter,
                TotalRecordsAfterFilter = dashboardData.TotalRecordsAfterFilter,
                FilteredAnalytics = dashboardData.FilteredAnalytics,
                
                // Enhanced properties
                Filters = filters,
                FilterOptions = filterOptions,
                SavedViews = savedViews,
                CurrentViewName = "Default View"
            };

            return View(viewModel);
        }

        // Enhanced optimized method with proper fallback
        private async Task<IActionResult> LegacyIndexOptimized(DashboardFilterViewModel? filters = null)
        {
            try
            {
                var currentUser = await _userManager.GetUserAsync(User);
                var currentUserId = currentUser?.Id ?? "";

                // Initialize filters if null or apply defaults
                filters ??= new DashboardFilterViewModel();

                // Load saved views for the current user
                var savedViews = await _context.SavedDashboardViews
                    .Where(v => v.UserId == currentUserId || v.IsPublic)
                    .OrderBy(v => v.Name)
                    .ToListAsync();

                // Get filter options
                var filterOptions = new DashboardFilterOptions
                {
                    Buildings = await _context.Buildings.OrderBy(b => b.BuildingName).ToListAsync(),
                    EquipmentTypes = await _context.EquipmentTypes.OrderBy(et => et.EquipmentTypeName).ToListAsync(),
                    Users = await _userManager.Users.OrderBy(u => u.UserName).ToListAsync(),
                    SavedViews = savedViews
                };

                // Apply filters to get dashboard data
                var dashboardData = await GetFilteredDashboardData(filters);

                var viewModel = new FEENALOoFINALE.Models.EnhancedDashboardViewModel
                {
                    TotalEquipment = dashboardData.TotalEquipment,
                    CriticalAlerts = dashboardData.CriticalAlerts,
                    ActiveMaintenanceTasks = dashboardData.ActiveMaintenanceTasks,
                    OverdueMaintenances = dashboardData.OverdueMaintenances,
                    EquipmentNeedingAttention = dashboardData.EquipmentNeedingAttention,
                    LowStockItems = dashboardData.LowStockItems,
                    ActiveAlerts = dashboardData.ActiveAlerts,
                    PendingTasks = dashboardData.PendingTasks,
                    InProgressTasks = dashboardData.InProgressTasks,
                    ResolvedToday = dashboardData.ResolvedToday,
                    AutoGeneratedTasks = dashboardData.AutoGeneratedTasks,
                    RecentAlerts = dashboardData.RecentAlerts,
                    UpcomingMaintenances = dashboardData.UpcomingMaintenances,
                    CriticalEquipment = dashboardData.CriticalEquipment,
                    EquipmentStatus = dashboardData.EquipmentStatus,
                    SuggestedActions = dashboardData.SuggestedActions,
                    TotalRecordsBeforeFilter = dashboardData.TotalRecordsBeforeFilter,
                    TotalRecordsAfterFilter = dashboardData.TotalRecordsAfterFilter,
                    FilteredAnalytics = dashboardData.FilteredAnalytics,
                    
                    // Enhanced properties
                    Filters = filters,
                    FilterOptions = filterOptions,
                    SavedViews = savedViews,
                    CurrentViewName = "Performance Enhanced View"
                };

                return View(viewModel);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Optimized dashboard error: {ex.Message}");
                return await LegacyIndex(filters);
            }
        }

        // Helper methods for missing functionality
        private string GetAlertIcon(AlertPriority priority)
        {
            return priority switch
            {
                AlertPriority.High => "bi-exclamation-triangle-fill",
                AlertPriority.Medium => "bi-exclamation-circle",
                AlertPriority.Low => "bi-info-circle",
                _ => "bi-bell"
            };
        }

        private string GetAlertIconColor(AlertPriority priority)
        {
            return priority switch
            {
                AlertPriority.High => "text-danger",
                AlertPriority.Medium => "text-warning",
                AlertPriority.Low => "text-info",
                _ => "text-secondary"
            };
        }

        private List<QuickAction> GenerateBasicSuggestedActions(int criticalAlerts, int overdueMaintenances, int equipmentNeedingAttention)
        {
            var actions = new List<QuickAction>();

            if (criticalAlerts > 0)
                actions.Add(new QuickAction 
                { 
                    Title = "Review Critical Alerts",
                    Description = $"Review {criticalAlerts} critical alert(s)",
                    Icon = "bi-exclamation-triangle",
                    Controller = "Alert",
                    Action = "Index",
                    Priority = "critical",
                    BadgeText = criticalAlerts.ToString()
                });

            if (overdueMaintenances > 0)
                actions.Add(new QuickAction 
                { 
                    Title = "Address Overdue Maintenance",
                    Description = $"Address {overdueMaintenances} overdue maintenance(s)",
                    Icon = "bi-gear",
                    Controller = "MaintenanceTask",
                    Action = "Index",
                    Priority = "urgent",
                    BadgeText = overdueMaintenances.ToString()
                });

            if (equipmentNeedingAttention > 0)
                actions.Add(new QuickAction 
                { 
                    Title = "Check Equipment",
                    Description = $"Check {equipmentNeedingAttention} equipment needing attention",
                    Icon = "bi-tools",
                    Controller = "Equipment",
                    Action = "Index",
                    Priority = "urgent",
                    BadgeText = equipmentNeedingAttention.ToString()
                });

            if (actions.Count == 0)
                actions.Add(new QuickAction 
                { 
                    Title = "System Status",
                    Description = "All systems running smoothly",
                    Icon = "bi-check-circle",
                    Controller = "Dashboard",
                    Action = "Index",
                    Priority = "normal",
                    BadgeText = "✓"
                });

            return actions;
        }

        private string GetStatusColor(EquipmentStatus status)
        {
            return status switch
            {
                EquipmentStatus.Active => "#28a745",
                EquipmentStatus.Inactive => "#ffc107",
                EquipmentStatus.Retired => "#dc3545",
                _ => "#6c757d"
            };
        }

        private string GetPriorityColor(AlertPriority priority)
        {
            return priority switch
            {
                AlertPriority.Low => "#10b981",     // Green
                AlertPriority.Medium => "#f59e0b",  // Yellow
                AlertPriority.High => "#ef4444",   // Red
                _ => "#3b82f6"                      // Blue (default)
            };
        }

        // Helper method to get filtered dashboard data
        private async Task<DashboardViewModel> GetFilteredDashboardData(DashboardFilterViewModel? filters)
        {
            filters ??= new DashboardFilterViewModel();
            
            // Base queries
            var equipmentQuery = _context.Equipment.AsQueryable();
            var alertQuery = _context.Alerts.AsQueryable();
            var maintenanceTaskQuery = _context.MaintenanceTasks.AsQueryable();
            var inventoryQuery = _context.InventoryItems.AsQueryable();

            // Count totals before filtering
            var totalEquipmentBefore = await equipmentQuery.CountAsync();

            // Apply filters
            if (filters.BuildingIds?.Any() == true)
            {
                equipmentQuery = equipmentQuery.Where(e => filters.BuildingIds.Contains(e.BuildingId));
                alertQuery = alertQuery.Where(a => a.Equipment != null && filters.BuildingIds.Contains(a.Equipment.BuildingId));
                maintenanceTaskQuery = maintenanceTaskQuery.Where(m => m.Equipment != null && filters.BuildingIds.Contains(m.Equipment.BuildingId));
            }

            if (filters.EquipmentTypeIds?.Any() == true)
            {
                equipmentQuery = equipmentQuery.Where(e => e.EquipmentModel != null && filters.EquipmentTypeIds.Contains(e.EquipmentModel.EquipmentTypeId));
                alertQuery = alertQuery.Where(a => a.Equipment != null && a.Equipment.EquipmentModel != null && filters.EquipmentTypeIds.Contains(a.Equipment.EquipmentModel.EquipmentTypeId));
                maintenanceTaskQuery = maintenanceTaskQuery.Where(m => m.Equipment != null && m.Equipment.EquipmentModel != null && filters.EquipmentTypeIds.Contains(m.Equipment.EquipmentModel.EquipmentTypeId));
            }

            if (filters.DateFrom.HasValue)
            {
                alertQuery = alertQuery.Where(a => a.CreatedDate >= filters.DateFrom.Value);
                maintenanceTaskQuery = maintenanceTaskQuery.Where(m => m.ScheduledDate >= filters.DateFrom.Value);
            }

            if (filters.DateTo.HasValue)
            {
                var dateTo = filters.DateTo.Value.Date.AddDays(1);
                alertQuery = alertQuery.Where(a => a.CreatedDate < dateTo);
                maintenanceTaskQuery = maintenanceTaskQuery.Where(m => m.ScheduledDate < dateTo);
            }

            // Calculate metrics
            var criticalAlerts = await alertQuery
                .Where(a => a.Priority == AlertPriority.High && a.Status == AlertStatus.Open)
                .CountAsync();

            var overdueMaintenances = await maintenanceTaskQuery
                .Where(m => m.ScheduledDate < DateTime.Now && m.Status != MaintenanceStatus.Completed)
                .CountAsync();

            var equipmentNeedingAttention = await equipmentQuery
                .Where(e => e.Status == EquipmentStatus.Inactive || e.Status == EquipmentStatus.Retired)
                .CountAsync();

            var activeAlerts = await alertQuery
                .Where(a => a.Status == AlertStatus.Open)
                .CountAsync();

            var pendingTasks = await maintenanceTaskQuery
                .Where(m => m.Status == MaintenanceStatus.Pending)
                .CountAsync();

            var inProgressTasks = await maintenanceTaskQuery
                .Where(m => m.Status == MaintenanceStatus.InProgress)
                .CountAsync();

            var resolvedToday = await _context.Alerts
                .Where(a => a.Status == AlertStatus.Resolved && a.CreatedDate.Date == DateTime.Today)
                .CountAsync();

            var autoGeneratedTasks = await maintenanceTaskQuery
                .Where(m => m.CreatedFromAlertId != null)
                .CountAsync();

            // Get data for display
            var criticalEquipment = await equipmentQuery
                .Include(e => e.EquipmentModel)
                .Include(e => e.Building)
                .Include(e => e.Room)
                .Where(e => e.Status == EquipmentStatus.Inactive)
                .Take(3)
                .ToListAsync();

            var recentAlerts = await alertQuery
                .Include(a => a.Equipment)
                    .ThenInclude(e => e!.EquipmentModel)
                .Include(a => a.AssignedTo)
                .OrderByDescending(a => a.CreatedDate)
                .Take(5)
                .ToListAsync();

            var upcomingMaintenances = await maintenanceTaskQuery
                .Include(m => m.Equipment)
                    .ThenInclude(e => e!.EquipmentModel)
                .Include(m => m.AssignedTo)
                .Where(m => m.Status != MaintenanceStatus.Completed)
                .OrderBy(m => m.ScheduledDate)
                .Take(5)
                .ToListAsync();

            var equipmentStatus = await equipmentQuery
                .GroupBy(e => e.Status)
                .Select(g => new EquipmentStatusCount { Status = g.Key, Count = g.Count() })
                .ToListAsync();

            var totalEquipmentAfter = await equipmentQuery.CountAsync();

            var suggestedActions = GenerateBasicSuggestedActions(criticalAlerts, overdueMaintenances, equipmentNeedingAttention);

            return new DashboardViewModel
            {
                TotalEquipment = totalEquipmentAfter,
                ActiveMaintenanceTasks = await maintenanceTaskQuery.CountAsync(),
                LowStockItems = await inventoryQuery
                    .Where(i => i.InventoryStocks != null && i.InventoryStocks.Sum(s => s.Quantity) <= i.MinStockLevel)
                    .CountAsync(),
                CriticalAlerts = criticalAlerts,
                OverdueMaintenances = overdueMaintenances,
                EquipmentNeedingAttention = equipmentNeedingAttention,
                ActiveAlerts = activeAlerts,
                PendingTasks = pendingTasks,
                InProgressTasks = inProgressTasks,
                ResolvedToday = resolvedToday,
                AutoGeneratedTasks = autoGeneratedTasks,
                RecentAlerts = recentAlerts,
                UpcomingMaintenances = upcomingMaintenances,
                CriticalEquipment = criticalEquipment,
                SuggestedActions = suggestedActions,
                EquipmentStatus = equipmentStatus,
                TotalRecordsBeforeFilter = totalEquipmentBefore,
                TotalRecordsAfterFilter = totalEquipmentAfter,
                FilteredAnalytics = new Dictionary<string, object>
                {
                    ["FilteredEquipment"] = totalEquipmentAfter,
                    ["FilterReductionPercent"] = totalEquipmentBefore > 0 ? Math.Round(((double)(totalEquipmentBefore - totalEquipmentAfter) / totalEquipmentBefore) * 100, 1) : 0
                }
            };
        }

        // API endpoint for real-time dashboard data
        [HttpGet]
        public async Task<IActionResult> GetDashboardData()
        {
            var data = new
            {
                TotalEquipment = await _context.Equipment.CountAsync(),
                ActiveMaintenanceTasks = await _context.MaintenanceLogs
                    .Where(t => t.Status == MaintenanceStatus.Pending || t.Status == MaintenanceStatus.InProgress)
                    .CountAsync(),
                LowStockItems = await _context.InventoryItems
                    .Where(i => i.InventoryStocks != null && i.InventoryStocks.Sum(s => s.Quantity) <= i.MinStockLevel)
                    .CountAsync(),
                CriticalAlerts = await _context.Alerts
                    .Where(a => a.Priority == AlertPriority.High && a.Status == AlertStatus.Open)
                    .CountAsync(),
                OverdueMaintenances = await _context.MaintenanceTasks
                    .Where(m => m.ScheduledDate < DateTime.Now && 
                               (m.Status == MaintenanceStatus.Pending || m.Status == MaintenanceStatus.InProgress))
                    .CountAsync(),
                EquipmentNeedingAttention = await _context.Equipment
                    .Where(e => e.Status == EquipmentStatus.Inactive || e.Status == EquipmentStatus.Retired)
                    .CountAsync(),
                LastUpdated = DateTime.Now
            };

            return Json(data);
        }

        // Chart data endpoints
        [HttpGet]
        public async Task<IActionResult> GetEquipmentStatusChart()
        {
            var equipmentStatus = await _context.Equipment
                .GroupBy(e => e.Status)
                .Select(g => new { 
                    Status = g.Key.ToString(), 
                    Count = g.Count(),
                    Color = GetStatusColor(g.Key)
                })
                .ToListAsync();

            return Json(new
            {
                labels = equipmentStatus.Select(x => x.Status).ToArray(),
                datasets = new[]
                {
                    new
                    {
                        data = equipmentStatus.Select(x => x.Count).ToArray(),
                        backgroundColor = equipmentStatus.Select(x => x.Color).ToArray(),
                        borderColor = "#ffffff",
                        borderWidth = 2
                    }
                }
            });
        }

        [HttpGet]
        public async Task<IActionResult> GetMaintenanceTrendsChart()
        {
            var last7Days = Enumerable.Range(0, 7)
                .Select(i => DateTime.Today.AddDays(-6 + i))
                .ToList();

            var maintenanceData = new List<object>();
            
            foreach (var date in last7Days)
            {
                var dayStart = date.Date;
                var dayEnd = dayStart.AddDays(1);
                
                var maintenanceCount = await _context.MaintenanceLogs
                    .Where(m => m.LogDate >= dayStart && m.LogDate < dayEnd)
                    .CountAsync();
                    
                maintenanceData.Add(new
                {
                    date = date.ToString("MMM dd"),
                    count = maintenanceCount
                });
            }

            return Json(new
            {
                labels = maintenanceData.Select(x => ((dynamic)x).date).ToArray(),
                datasets = new[]
                {
                    new
                    {
                        label = "Maintenance Activities",
                        data = maintenanceData.Select(x => ((dynamic)x).count).ToArray(),
                        borderColor = "#4f46e5",
                        backgroundColor = "rgba(79, 70, 229, 0.1)",
                        tension = 0.4,
                        fill = true
                    }
                }
            });
        }

        // Method to broadcast dashboard updates
        public async Task BroadcastDashboardUpdate()
        {
            try
            {
                var dashboardData = await GetDashboardDataInternal();
                if (_hubContext != null)
                {
                    await _hubContext.Clients.Group("Dashboard").SendAsync("DashboardUpdate", dashboardData);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error broadcasting dashboard update: {ex.Message}");
            }
        }

        private async Task<object> GetDashboardDataInternal()
        {
            return new
            {
                TotalEquipment = await _context.Equipment.CountAsync(),
                ActiveMaintenanceTasks = await _context.MaintenanceLogs
                    .Where(t => t.Status == MaintenanceStatus.Pending || t.Status == MaintenanceStatus.InProgress)
                    .CountAsync(),
                LowStockItems = await _context.InventoryItems
                    .Where(i => i.InventoryStocks != null && i.InventoryStocks.Sum(s => s.Quantity) <= i.MinStockLevel)
                    .CountAsync(),
                CriticalAlerts = await _context.Alerts
                    .Where(a => a.Priority == AlertPriority.High && a.Status == AlertStatus.Open)
                    .CountAsync(),
                OverdueMaintenances = await _context.MaintenanceTasks
                    .Where(m => m.ScheduledDate < DateTime.Now && 
                               (m.Status == MaintenanceStatus.Pending || m.Status == MaintenanceStatus.InProgress))
                    .CountAsync(),
                EquipmentNeedingAttention = await _context.Equipment
                    .Where(e => e.Status == EquipmentStatus.Inactive || e.Status == EquipmentStatus.Retired)
                    .CountAsync(),
                LastUpdated = DateTime.Now
            };
        }
    }
}
