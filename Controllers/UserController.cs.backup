using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using FEENALOoFINALE.Data;
using FEENALOoFINALE.Models;
using FEENALOoFINALE.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Identity;
using System.Security.Cryptography;

namespace FEENALOoFINALE.Controllers
{
    public class UserController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly SignInManager<User> _signInManager;
        private readonly UserManager<User> _userManager;
        private readonly IEmailService _emailService;
        private readonly ILogger<UserController> _logger;

        public UserController(
            ApplicationDbContext context, 
            SignInManager<User> signInManager, 
            UserManager<User> userManager,
            IEmailService emailService,
            ILogger<UserController> logger)
        {
            _context = context;
            _signInManager = signInManager;
            _userManager = userManager;
            _emailService = emailService;
            _logger = logger;
        }

        // GET: User (Protected)
        [Authorize]
        public async Task<IActionResult> Index()
        {
            var users = await _context.Users
                .OrderBy(u => u.FullName)
                .ToListAsync();

            return View(users);
        }

        // GET: Profile for current logged-in user (Protected)
        [Authorize]
        public async Task<IActionResult> Profile()
        {
            if (User?.Identity?.Name == null)
            {
                return RedirectToAction("Login", "User");
            }

            var user = await _context.Users
                .FirstOrDefaultAsync(u => u.UserName == User.Identity.Name);

            if (user == null)
            {
                return NotFound();
            }

            return View(user);
        }

        // POST: Logout (Protected)
        [Authorize]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Logout()
        {
            await _signInManager.SignOutAsync();
            return RedirectToAction("Login", "User");
        }

        // GET: Login (Public)
        [AllowAnonymous]
        public IActionResult Login()
        {
            return View();
        }

        // POST: Login (Public)
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Login(string username, string password)
        {
            if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
            {
                ModelState.AddModelError("", "Username and password are required.");
                return View();
            }

            // Find user by username or email
            var user = await _userManager.FindByNameAsync(username) ?? 
                      await _userManager.FindByEmailAsync(username);

            if (user != null && !string.IsNullOrEmpty(user.UserName))
            {
                // Check if email is verified
                if (!user.IsEmailVerified)
                {
                    ModelState.AddModelError("", "Please verify your email address before logging in. Check your email for verification link.");
                    ViewBag.ShowResendVerification = true;
                    ViewBag.Email = user.Email;
                    return View();
                }

                // Use SignInManager for proper authentication
                var result = await _signInManager.PasswordSignInAsync(user.UserName, password, false, false);
                
                if (result.Succeeded)
                {
                    // Update last login time
                    user.LastLogin = DateTime.UtcNow;
                    await _userManager.UpdateAsync(user);
                    
                    // Redirect to dashboard or home page after successful login
                    return RedirectToAction("Index", "Dashboard");
                }
            }

            ModelState.AddModelError("", "Invalid username or password.");
            return View();
        }

        // GET: User/Details/5 (Protected)
        [Authorize]
        public async Task<IActionResult> Details(string id)
        {
            if (string.IsNullOrEmpty(id))
                return NotFound();

            var user = await _context.Users.FirstOrDefaultAsync(m => m.Id == id);

            if (user == null)
                return NotFound();

            return View(user);
        }

        // GET: User/Create (Public)
        [AllowAnonymous]
        public IActionResult Create()
        {
            return View(new RegisterViewModel());
        }

        // POST: User/Create (Public)
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(RegisterViewModel model)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    // Validate email format
                    if (!_emailService.IsValidEmail(model.Email))
                    {
                        ModelState.AddModelError("Email", "Please enter a valid email address.");
                        return View(model);
                    }

                    // Check if email already exists
                    var existingUserByEmail = await _userManager.FindByEmailAsync(model.Email);
                    if (existingUserByEmail != null)
                    {
                        ModelState.AddModelError("Email", "An account with this email address already exists.");
                        return View(model);
                    }

                    // Check if username already exists
                    var existingUserByUsername = await _userManager.FindByNameAsync(model.UserName);
                    if (existingUserByUsername != null)
                    {
                        ModelState.AddModelError("UserName", "This username is already taken.");
                        return View(model);
                    }

                    // Check if Worker ID already exists
                    var existingUserByWorkerId = await _context.Users
                        .FirstOrDefaultAsync(u => u.WorkerId == model.WorkerId);
                    if (existingUserByWorkerId != null)
                    {
                        ModelState.AddModelError("WorkerId", "This Worker ID is already registered.");
                        return View(model);
                    }

                    // Create the user
                    var user = new User
                    {
                        FirstName = model.FirstName,
                        LastName = model.LastName,
                        WorkerId = model.WorkerId,
                        UserName = model.UserName,
                        Email = model.Email,
                        ContactNumber = model.ContactNumber,
                        IsEmailVerified = false,
                        EmailVerificationToken = GenerateEmailVerificationToken(),
                        EmailVerificationTokenExpires = DateTime.UtcNow.AddHours(24),
                        LastLogin = DateTime.UtcNow
                    };

                    var result = await _userManager.CreateAsync(user, model.Password);

                    if (result.Succeeded)
                    {
                        try
                        {
                            // Send verification email
                            var verificationUrl = Url.Action("VerifyEmail", "User", 
                                new { userId = user.Id, token = user.EmailVerificationToken }, 
                                Request.Scheme);

                            await _emailService.SendEmailVerificationAsync(user.Email!, verificationUrl!);

                            TempData["SuccessMessage"] = "Account created successfully! Please check your email to verify your account before logging in.";
                            return RedirectToAction("Login", "User");
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError(ex, "Failed to send verification email to {Email}", user.Email);
                            TempData["WarningMessage"] = "Account created successfully, but we couldn't send the verification email. Please contact support.";
                            return RedirectToAction("Login", "User");
                        }
                    }

                    // Add Identity errors to ModelState
                    foreach (var error in result.Errors)
                    {
                        ModelState.AddModelError("", error.Description);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error creating user account for {Email}", model.Email);
                    ModelState.AddModelError("", "An error occurred while creating your account. Please try again.");
                }
            }

            return View(model);
        }
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError("", error.Description);
                }
            }

            return View(user);
        }

        // GET: User/Edit/5 (Protected)
        [Authorize]
        public async Task<IActionResult> Edit(string id)
        {
            if (string.IsNullOrEmpty(id))
                return NotFound();

            var user = await _context.Users.FindAsync(id);

            if (user == null)
                return NotFound();

            return View(user);
        }

        // POST: User/Edit/5 (Protected)
        [Authorize]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(string id, [Bind("Id,UserName,Email,FirstName,LastName,WorkerId,PhoneNumber,ContactNumber")] User user)
        {
            if (id != user.Id)
                return NotFound();

            if (ModelState.IsValid)
            {
                try
                {
                    // Get the existing user from UserManager to ensure proper Identity handling
                    var existingUser = await _userManager.FindByIdAsync(id);
                    if (existingUser == null)
                        return NotFound();

                    // Update the basic properties
                    existingUser.FirstName = user.FirstName;
                    existingUser.LastName = user.LastName;
                    existingUser.WorkerId = user.WorkerId;
                    existingUser.PhoneNumber = user.PhoneNumber;
                    existingUser.ContactNumber = user.ContactNumber;

                    // Update username if changed
                    if (existingUser.UserName != user.UserName)
                    {
                        var setUserNameResult = await _userManager.SetUserNameAsync(existingUser, user.UserName);
                        if (!setUserNameResult.Succeeded)
                        {
                            foreach (var error in setUserNameResult.Errors)
                            {
                                ModelState.AddModelError("", error.Description);
                            }
                            return View(user);
                        }
                    }

                    // Update email if changed
                    if (existingUser.Email != user.Email)
                    {
                        var setEmailResult = await _userManager.SetEmailAsync(existingUser, user.Email);
                        if (!setEmailResult.Succeeded)
                        {
                            foreach (var error in setEmailResult.Errors)
                            {
                                ModelState.AddModelError("", error.Description);
                            }
                            return View(user);
                        }
                    }

                    // Update the user through UserManager
                    var updateResult = await _userManager.UpdateAsync(existingUser);
                    if (updateResult.Succeeded)
                    {
                        return RedirectToAction(nameof(Profile));
                    }
                    else
                    {
                        foreach (var error in updateResult.Errors)
                        {
                            ModelState.AddModelError("", error.Description);
                        }
                    }
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!UserExists(user.Id))
                        return NotFound();

                    throw;
                }
            }

            return View(user);
        }

        // GET: User/Delete/5 (Protected)
        [Authorize]
        public async Task<IActionResult> Delete(string id)
        {
            if (string.IsNullOrEmpty(id))
                return NotFound();

            var user = await _context.Users.FirstOrDefaultAsync(m => m.Id == id);

            if (user == null)
                return NotFound();

            return View(user);
        }

        // POST: User/DeleteConfirmed/5 (Protected)
        [Authorize]
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(string id)
        {
            var user = await _context.Users.FindAsync(id);

            if (user != null)
            {
                _context.Users.Remove(user);
                await _context.SaveChangesAsync();
            }

            return RedirectToAction(nameof(Index));
        }

        // GET: User/Settings (Protected)
        [Authorize]
        public async Task<IActionResult> Settings()
        {
            if (User?.Identity?.Name == null)
            {
                return RedirectToAction("Login", "User");
            }

            var user = await _context.Users
                .FirstOrDefaultAsync(u => u.UserName == User.Identity.Name);

            if (user == null)
            {
                return NotFound();
            }

            return View(user);
        }

        // POST: User/Settings (Protected)
        [Authorize]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Settings(User model, string? currentPassword, string? newPassword, string? confirmPassword)
        {
            if (User?.Identity?.Name == null)
            {
                return RedirectToAction("Login", "User");
            }

            var user = await _context.Users
                .FirstOrDefaultAsync(u => u.UserName == User.Identity.Name);

            if (user == null)
            {
                return NotFound();
            }

            try
            {
                // Update basic profile information
                user.FirstName = model.FirstName;
                user.LastName = model.LastName;
                user.Email = model.Email;
                user.PhoneNumber = model.PhoneNumber;
                user.ContactNumber = model.ContactNumber;
                user.WorkerId = model.WorkerId;

                // Handle password change if provided
                if (!string.IsNullOrEmpty(newPassword))
                {
                    if (string.IsNullOrEmpty(currentPassword))
                    {
                        ModelState.AddModelError("", "Current password is required to set a new password.");
                        return View(user);
                    }

                    if (newPassword != confirmPassword)
                    {
                        ModelState.AddModelError("", "New password and confirmation password do not match.");
                        return View(user);
                    }

                    // Verify current password
                    var passwordCheck = await _userManager.CheckPasswordAsync(user, currentPassword);
                    if (!passwordCheck)
                    {
                        ModelState.AddModelError("", "Current password is incorrect.");
                        return View(user);
                    }

                    // Change password
                    var result = await _userManager.ChangePasswordAsync(user, currentPassword, newPassword);
                    if (!result.Succeeded)
                    {
                        foreach (var error in result.Errors)
                        {
                            ModelState.AddModelError("", error.Description);
                        }
                        return View(user);
                    }
                }

                _context.Update(user);
                await _context.SaveChangesAsync();

                TempData["SuccessMessage"] = "Account settings updated successfully!";
                return RedirectToAction(nameof(Settings));
            }
            catch (Exception)
            {
                ModelState.AddModelError("", "An error occurred while updating your settings. Please try again.");
                return View(user);
            }
        }

        private bool UserExists(string id)
        {
            return _context.Users.Any(e => e.Id == id);
        }

        // Email verification methods
        [AllowAnonymous]
        public async Task<IActionResult> VerifyEmail(string userId, string token)
        {
            if (string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(token))
            {
                TempData["ErrorMessage"] = "Invalid verification link.";
                return RedirectToAction("Login");
            }

            var user = await _userManager.FindByIdAsync(userId);
            if (user == null)
            {
                TempData["ErrorMessage"] = "User not found.";
                return RedirectToAction("Login");
            }

            if (user.EmailVerificationToken != token)
            {
                TempData["ErrorMessage"] = "Invalid verification token.";
                return RedirectToAction("Login");
            }

            if (user.EmailVerificationTokenExpires < DateTime.UtcNow)
            {
                TempData["ErrorMessage"] = "Verification link has expired. Please request a new one.";
                return RedirectToAction("Login");
            }

            // Mark email as verified
            user.IsEmailVerified = true;
            user.EmailVerificationToken = null;
            user.EmailVerificationTokenExpires = null;
            user.EmailConfirmed = true; // Identity property

            var result = await _userManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                TempData["SuccessMessage"] = "Email verified successfully! You can now log in.";
            }
            else
            {
                TempData["ErrorMessage"] = "Failed to verify email. Please try again.";
            }

            return RedirectToAction("Login");
        }

        [AllowAnonymous]
        public async Task<IActionResult> ResendVerification(string email)
        {
            if (string.IsNullOrEmpty(email))
            {
                TempData["ErrorMessage"] = "Email address is required.";
                return RedirectToAction("Login");
            }

            var user = await _userManager.FindByEmailAsync(email);
            if (user == null)
            {
                TempData["ErrorMessage"] = "User not found.";
                return RedirectToAction("Login");
            }

            if (user.IsEmailVerified)
            {
                TempData["InfoMessage"] = "Email is already verified.";
                return RedirectToAction("Login");
            }

            // Generate new verification token
            user.EmailVerificationToken = GenerateEmailVerificationToken();
            user.EmailVerificationTokenExpires = DateTime.UtcNow.AddHours(24);

            var result = await _userManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                try
                {
                    var verificationUrl = Url.Action("VerifyEmail", "User",
                        new { userId = user.Id, token = user.EmailVerificationToken },
                        Request.Scheme);

                    await _emailService.SendEmailVerificationAsync(user.Email!, verificationUrl!);
                    TempData["SuccessMessage"] = "Verification email sent successfully!";
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Failed to send verification email to {Email}", user.Email);
                    TempData["ErrorMessage"] = "Failed to send verification email. Please try again.";
                }
            }

            return RedirectToAction("Login");
        }

        private string GenerateEmailVerificationToken()
        {
            using var rng = RandomNumberGenerator.Create();
            var bytes = new byte[32];
            rng.GetBytes(bytes);
            return Convert.ToBase64String(bytes);
        }

        // API endpoint to check if Worker ID exists (for client-side validation)
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> CheckWorkerIdExists(string workerId)
        {
            if (string.IsNullOrEmpty(workerId))
            {
                return Json(new { exists = false });
            }

            var exists = await _context.Users.AnyAsync(u => u.WorkerId == workerId);
            return Json(new { exists });
        }

        // API endpoint to check if email exists (for client-side validation)
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> CheckEmailExists(string email)
        {
            if (string.IsNullOrEmpty(email))
            {
                return Json(new { exists = false });
            }

            var user = await _userManager.FindByEmailAsync(email);
            return Json(new { exists = user != null });
        }

        // API endpoint to check if username exists (for client-side validation)
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> CheckUsernameExists(string username)
        {
            if (string.IsNullOrEmpty(username))
            {
                return Json(new { exists = false });
            }

            var user = await _userManager.FindByNameAsync(username);
            return Json(new { exists = user != null });
        }
    }
}
