// <auto-generated />
using System;
using FEENALOoFINALE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FEENALOoFINALE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250711152444_UpdateSavedDashboardViewColumns")]
    partial class UpdateSavedDashboardViewColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FEENALOoFINALE.Models.Alert", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlertId"));

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryItemId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlertId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BuildingId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            BuildingId = 1,
                            BuildingName = "Petroleum Building"
                        },
                        new
                        {
                            BuildingId = 2,
                            BuildingName = "New Engineering Building"
                        });
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ExpectedLifespanMonths")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("EquipmentModelId");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("RoomId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.EquipmentModel", b =>
                {
                    b.Property<int>("EquipmentModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentModelId"));

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentModelId");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("EquipmentModels");

                    b.HasData(
                        new
                        {
                            EquipmentModelId = 1,
                            EquipmentTypeId = 1,
                            ModelName = "Projector Model A"
                        },
                        new
                        {
                            EquipmentModelId = 2,
                            EquipmentTypeId = 1,
                            ModelName = "Projector Model B"
                        },
                        new
                        {
                            EquipmentModelId = 3,
                            EquipmentTypeId = 2,
                            ModelName = "Air Conditioner Model A"
                        },
                        new
                        {
                            EquipmentModelId = 4,
                            EquipmentTypeId = 2,
                            ModelName = "Air Conditioner Model B"
                        },
                        new
                        {
                            EquipmentModelId = 5,
                            EquipmentTypeId = 3,
                            ModelName = "Podium Model A"
                        },
                        new
                        {
                            EquipmentModelId = 6,
                            EquipmentTypeId = 3,
                            ModelName = "Podium Model B"
                        });
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.EquipmentType", b =>
                {
                    b.Property<int>("EquipmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentTypeId"));

                    b.Property<string>("EquipmentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentTypeId");

                    b.ToTable("EquipmentTypes");

                    b.HasData(
                        new
                        {
                            EquipmentTypeId = 1,
                            EquipmentTypeName = "Projectors"
                        },
                        new
                        {
                            EquipmentTypeId = 2,
                            EquipmentTypeName = "Air Conditioners"
                        },
                        new
                        {
                            EquipmentTypeId = 3,
                            EquipmentTypeName = "Podiums"
                        });
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.FailurePrediction", b =>
                {
                    b.Property<int>("PredictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PredictionId"));

                    b.Property<string>("AnalysisNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConfidenceLevel")
                        .HasColumnType("int");

                    b.Property<string>("ContributingFactors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PredictedFailureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PredictionId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("FailurePredictions");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.InventoryItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CompatibleModels")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxStockLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinimumStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReorderPoint")
                        .HasColumnType("int");

                    b.Property<int>("ReorderQuantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.InventoryStock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StockId");

                    b.HasIndex("ItemId");

                    b.ToTable("InventoryStocks");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.MaintenanceInventoryLink", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkId"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("LogId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("int");

                    b.HasKey("LinkId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LogId");

                    b.ToTable("MaintenanceInventoryLinks");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.MaintenanceLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int?>("AlertId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("DowntimeDuration")
                        .HasColumnType("time");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaintenanceTaskId")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Technician")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogId");

                    b.HasIndex("AlertId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("MaintenanceTaskId");

                    b.ToTable("MaintenanceLogs");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.MaintenanceTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedFromAlertId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CreatedFromAlertId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("MaintenanceTasks");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            BuildingId = 1,
                            RoomName = "PB001"
                        },
                        new
                        {
                            RoomId = 2,
                            BuildingId = 1,
                            RoomName = "PB012"
                        },
                        new
                        {
                            RoomId = 3,
                            BuildingId = 1,
                            RoomName = "PB014"
                        },
                        new
                        {
                            RoomId = 4,
                            BuildingId = 1,
                            RoomName = "PB020"
                        },
                        new
                        {
                            RoomId = 5,
                            BuildingId = 1,
                            RoomName = "PB201"
                        },
                        new
                        {
                            RoomId = 6,
                            BuildingId = 1,
                            RoomName = "PB208"
                        },
                        new
                        {
                            RoomId = 7,
                            BuildingId = 1,
                            RoomName = "PB214"
                        },
                        new
                        {
                            RoomId = 8,
                            BuildingId = 2,
                            RoomName = "NEB-GF"
                        },
                        new
                        {
                            RoomId = 9,
                            BuildingId = 2,
                            RoomName = "NEB-FF1"
                        },
                        new
                        {
                            RoomId = 10,
                            BuildingId = 2,
                            RoomName = "NEB-FF2"
                        },
                        new
                        {
                            RoomId = 11,
                            BuildingId = 2,
                            RoomName = "NEB-SF"
                        },
                        new
                        {
                            RoomId = 12,
                            BuildingId = 2,
                            RoomName = "NEB-TF"
                        });
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.SavedDashboardView", b =>
                {
                    b.Property<int>("ViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViewId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilterConfig")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ViewId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedDashboardViews");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WorkerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.Alert", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.User", "AssignedTo")
                        .WithMany("AssignedAlerts")
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("FEENALOoFINALE.Models.Equipment", "Equipment")
                        .WithMany("Alerts")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("FEENALOoFINALE.Models.InventoryItem", "InventoryItem")
                        .WithMany("Alerts")
                        .HasForeignKey("InventoryItemId");

                    b.Navigation("AssignedTo");

                    b.Navigation("Equipment");

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.Equipment", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.Building", "Building")
                        .WithMany("Equipments")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FEENALOoFINALE.Models.EquipmentModel", "EquipmentModel")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FEENALOoFINALE.Models.EquipmentType", "EquipmentType")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FEENALOoFINALE.Models.Room", "Room")
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("EquipmentModel");

                    b.Navigation("EquipmentType");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.EquipmentModel", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.EquipmentType", "EquipmentType")
                        .WithMany("EquipmentModels")
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.FailurePrediction", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.Equipment", "Equipment")
                        .WithMany("FailurePredictions")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.InventoryStock", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.InventoryItem", "InventoryItem")
                        .WithMany("InventoryStocks")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.MaintenanceInventoryLink", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.InventoryItem", "InventoryItem")
                        .WithMany("MaintenanceInventoryLinks")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FEENALOoFINALE.Models.MaintenanceLog", "MaintenanceLog")
                        .WithMany("MaintenanceInventoryLinks")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItem");

                    b.Navigation("MaintenanceLog");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.MaintenanceLog", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.Alert", "Alert")
                        .WithMany()
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FEENALOoFINALE.Models.Equipment", "Equipment")
                        .WithMany("MaintenanceLogs")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FEENALOoFINALE.Models.MaintenanceTask", "Task")
                        .WithMany()
                        .HasForeignKey("MaintenanceTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Alert");

                    b.Navigation("Equipment");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.MaintenanceTask", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.User", "AssignedTo")
                        .WithMany("MaintenanceTasks")
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("FEENALOoFINALE.Models.Alert", "OriginatingAlert")
                        .WithMany()
                        .HasForeignKey("CreatedFromAlertId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FEENALOoFINALE.Models.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("Equipment");

                    b.Navigation("OriginatingAlert");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.Room", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.SavedDashboardView", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FEENALOoFINALE.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FEENALOoFINALE.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.Building", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.Equipment", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("FailurePredictions");

                    b.Navigation("MaintenanceLogs");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.EquipmentModel", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.EquipmentType", b =>
                {
                    b.Navigation("EquipmentModels");

                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.InventoryItem", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("InventoryStocks");

                    b.Navigation("MaintenanceInventoryLinks");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.MaintenanceLog", b =>
                {
                    b.Navigation("MaintenanceInventoryLinks");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.Room", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("FEENALOoFINALE.Models.User", b =>
                {
                    b.Navigation("AssignedAlerts");

                    b.Navigation("MaintenanceTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
