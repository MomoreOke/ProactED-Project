using FEENALOoFINALE.Models;
using FEENALOoFINALE.Data;
using Microsoft.EntityFrameworkCore;
using System.Text.Json;

namespace FEENALOoFINALE.Services
{
    public class EquipmentUsageTrackingService
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<EquipmentUsageTrackingService> _logger;

        public EquipmentUsageTrackingService(ApplicationDbContext context, ILogger<EquipmentUsageTrackingService> logger)
        {
            _context = context;
            _logger = logger;
        }

        /// <summary>
        /// Record equipment usage data
        /// </summary>
        public async Task<EquipmentUsageLog> RecordUsageAsync(int equipmentId, decimal hoursUsed, 
            Dictionary<string, object>? performanceData = null, string dataSource = "System_Monitor")
        {
            var equipment = await _context.Equipment.FindAsync(equipmentId);
            if (equipment == null)
                throw new ArgumentException("Equipment not found", nameof(equipmentId));

            var usageLog = new EquipmentUsageLog
            {
                EquipmentId = equipmentId,
                UsageDate = DateTime.Now,
                HoursUsed = hoursUsed,
                DataSource = dataSource,
                PerformanceMetrics = performanceData != null ? JsonSerializer.Serialize(performanceData) : null
            };

            // Extract specific metrics from performance data if provided
            if (performanceData != null)
            {
                if (performanceData.TryGetValue("temperature", out var temp))
                    usageLog.TemperatureReading = Convert.ToDecimal(temp);

                if (performanceData.TryGetValue("efficiency", out var eff))
                    usageLog.EfficiencyScore = Convert.ToDecimal(eff);

                if (performanceData.TryGetValue("powerConsumption", out var power))
                    usageLog.PowerConsumption = Convert.ToDecimal(power);

                if (performanceData.TryGetValue("vibration", out var vib))
                    usageLog.VibrationLevel = Convert.ToDecimal(vib);

                if (performanceData.TryGetValue("responseTime", out var resp))
                    usageLog.ResponseTimeMs = Convert.ToInt32(resp);

                if (performanceData.TryGetValue("memoryUsage", out var mem))
                    usageLog.MemoryUsagePercent = Convert.ToDecimal(mem);

                if (performanceData.TryGetValue("networkConnected", out var net))
                    usageLog.NetworkConnected = Convert.ToBoolean(net);

                if (performanceData.TryGetValue("errors", out var errors))
                    usageLog.ErrorLogs = errors.ToString();
            }

            _context.EquipmentUsageLogs.Add(usageLog);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Recorded usage for equipment {EquipmentId}: {Hours} hours", equipmentId, hoursUsed);
            return usageLog;
        }

        /// <summary>
        /// Generate simulated usage data for classroom equipment
        /// </summary>
        public async Task<int> GenerateSimulatedUsageDataAsync(DateTime? startDate = null, int daysToGenerate = 30)
        {
            startDate ??= DateTime.Now.AddDays(-daysToGenerate);
            var recordsCreated = 0;

            var activeEquipment = await _context.Equipment
                .Include(e => e.EquipmentType)
                .Where(e => e.Status == EquipmentStatus.Active)
                .ToListAsync();

            var random = new Random();

            for (var date = startDate.Value; date <= DateTime.Now.AddDays(-1); date = date.AddDays(1))
            {
                // Skip weekends for most equipment (simulate school schedule)
                var isWeekend = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;

                foreach (var equipment in activeEquipment)
                {
                    // Skip some days randomly to simulate realistic usage patterns
                    if (random.NextDouble() < 0.2) continue; // 20% chance of no usage

                    var hoursUsed = GenerateRealisticUsageHours(equipment, date, isWeekend, random);
                    if (hoursUsed <= 0) continue;

                    var performanceData = GeneratePerformanceData(equipment, hoursUsed, random);

                    var usageLog = new EquipmentUsageLog
                    {
                        EquipmentId = equipment.EquipmentId,
                        UsageDate = date,
                        HoursUsed = hoursUsed,
                        DataSource = "Simulated_Data",
                        PerformanceMetrics = JsonSerializer.Serialize(performanceData),
                        TemperatureReading = Convert.ToDecimal(performanceData["temperature"]),
                        EfficiencyScore = Convert.ToDecimal(performanceData["efficiency"]),
                        PowerConsumption = Convert.ToDecimal(performanceData["powerConsumption"]),
                        VibrationLevel = Convert.ToDecimal(performanceData["vibration"]),
                        ResponseTimeMs = Convert.ToInt32(performanceData["responseTime"]),
                        MemoryUsagePercent = Convert.ToDecimal(performanceData["memoryUsage"]),
                        NetworkConnected = Convert.ToBoolean(performanceData["networkConnected"]),
                        CreatedAt = date.AddHours(hoursUsed)
                    };

                    _context.EquipmentUsageLogs.Add(usageLog);
                    recordsCreated++;
                }

                // Batch save every 10 days to improve performance
                if (recordsCreated % 500 == 0)
                {
                    await _context.SaveChangesAsync();
                }
            }

            await _context.SaveChangesAsync();
            _logger.LogInformation("Generated {Count} simulated usage records", recordsCreated);
            return recordsCreated;
        }

        /// <summary>
        /// Get equipment usage patterns for predictive analysis
        /// </summary>
        public async Task<List<EquipmentUsagePattern>> GetUsagePatternsAsync(int equipmentId, int days = 30)
        {
            var startDate = DateTime.Now.AddDays(-days);
            
            var usageData = await _context.EquipmentUsageLogs
                .Where(ul => ul.EquipmentId == equipmentId && ul.UsageDate >= startDate)
                .OrderBy(ul => ul.UsageDate)
                .ToListAsync();

            var patterns = usageData.GroupBy(ul => ul.UsageDate.DayOfWeek)
                .Select(g => new EquipmentUsagePattern
                {
                    DayOfWeek = g.Key,
                    AverageHoursUsed = g.Average(ul => ul.HoursUsed),
                    AverageEfficiency = g.Average(ul => ul.EfficiencyScore),
                    UsageCount = g.Count(),
                    MaxTemperature = g.Max(ul => ul.TemperatureReading ?? 0),
                    AverageResponseTime = g.Average(ul => ul.ResponseTimeMs ?? 0)
                })
                .ToList();

            return patterns;
        }

        /// <summary>
        /// Calculate equipment health score based on usage patterns
        /// </summary>
        public async Task<decimal> CalculateHealthScoreAsync(int equipmentId)
        {
            var recentUsage = await _context.EquipmentUsageLogs
                .Where(ul => ul.EquipmentId == equipmentId && ul.UsageDate >= DateTime.Now.AddDays(-30))
                .ToListAsync();

            if (!recentUsage.Any()) return 100; // New equipment with no usage data

            var avgEfficiency = recentUsage.Average(ul => ul.EfficiencyScore);
            var maxTemp = recentUsage.Max(ul => ul.TemperatureReading ?? 20);
            var avgVibration = recentUsage.Average(ul => ul.VibrationLevel ?? 0);
            var errorCount = recentUsage.Count(ul => !string.IsNullOrEmpty(ul.ErrorLogs));
            var networkIssues = recentUsage.Count(ul => ul.NetworkConnected == false);

            var healthScore = avgEfficiency;

            // Penalties for concerning metrics
            if (maxTemp > 70) healthScore -= 10; // High temperature
            if (avgVibration > 5) healthScore -= 15; // High vibration
            if (errorCount > recentUsage.Count * 0.1) healthScore -= 20; // More than 10% error rate
            if (networkIssues > recentUsage.Count * 0.2) healthScore -= 10; // More than 20% network issues

            return Math.Max(0, Math.Min(100, healthScore));
        }

        private decimal GenerateRealisticUsageHours(Equipment equipment, DateTime date, bool isWeekend, Random random)
        {
            var equipmentType = equipment.EquipmentType?.EquipmentTypeName ?? "Unknown";

            // Base usage hours by equipment type and day type
            var baseHours = equipmentType.ToLower() switch
            {
                var type when type.Contains("projector") => isWeekend ? 0 : random.Next(4, 8),
                var type when type.Contains("computer") => isWeekend ? random.Next(0, 3) : random.Next(6, 10),
                var type when type.Contains("air condition") => isWeekend ? random.Next(2, 6) : random.Next(8, 12),
                var type when type.Contains("printer") => isWeekend ? 0 : random.Next(1, 4),
                var type when type.Contains("router") || type.Contains("switch") => 24, // Always on
                _ => isWeekend ? random.Next(0, 2) : random.Next(2, 6)
            };

            // Add some randomness (-20% to +20%)
            var variance = (decimal)(random.NextDouble() * 0.4 - 0.2);
            return Math.Max(0, baseHours * (1 + variance));
        }

        private Dictionary<string, object> GeneratePerformanceData(Equipment equipment, decimal hoursUsed, Random random)
        {
            var equipmentType = equipment.EquipmentType?.EquipmentTypeName ?? "Unknown";
            var equipmentAge = equipment.InstallationDate.HasValue ? 
                (DateTime.Now - equipment.InstallationDate.Value).Days : 365;

            // Base performance metrics
            var efficiency = Math.Max(60, 100 - (equipmentAge / 365.0 * 5) + random.Next(-10, 5));
            var temperature = equipmentType.ToLower() switch
            {
                var type when type.Contains("projector") => 45 + hoursUsed * 2 + random.Next(-5, 10),
                var type when type.Contains("computer") => 35 + hoursUsed * 1.5 + random.Next(-3, 8),
                var type when type.Contains("air condition") => 25 + random.Next(-2, 5),
                _ => 20 + hoursUsed * 0.5 + random.Next(-2, 5)
            };

            return new Dictionary<string, object>
            {
                ["efficiency"] = Math.Round(efficiency, 1),
                ["temperature"] = Math.Round(temperature, 1),
                ["powerConsumption"] = equipmentType.ToLower() switch
                {
                    var type when type.Contains("projector") => 300 + hoursUsed * 10 + random.Next(-50, 50),
                    var type when type.Contains("computer") => 150 + hoursUsed * 15 + random.Next(-20, 30),
                    var type when type.Contains("air condition") => 2000 + hoursUsed * 50 + random.Next(-200, 200),
                    _ => 50 + hoursUsed * 5 + random.Next(-10, 20)
                },
                ["vibration"] = Math.Max(0, Math.Min(10, random.NextDouble() * 3 + (equipmentAge / 365.0))),
                ["responseTime"] = equipmentType.ToLower().Contains("computer") ? 
                    random.Next(50, 500) + (int)(hoursUsed * 10) : 0,
                ["memoryUsage"] = equipmentType.ToLower().Contains("computer") ? 
                    Math.Min(95, 30 + hoursUsed * 5 + random.Next(-10, 20)) : 0,
                ["networkConnected"] = random.NextDouble() > 0.05, // 95% uptime
                ["errors"] = random.NextDouble() < 0.1 ? "Minor operational warning" : null
            };
        }
    }

    public class EquipmentUsagePattern
    {
        public DayOfWeek DayOfWeek { get; set; }
        public decimal AverageHoursUsed { get; set; }
        public decimal AverageEfficiency { get; set; }
        public int UsageCount { get; set; }
        public decimal MaxTemperature { get; set; }
        public double AverageResponseTime { get; set; }
    }
}
