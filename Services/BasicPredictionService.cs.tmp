using FEENALOoFINALE.Models;
using FEENALOoFINALE.Data;
using Microsoft.EntityFrameworkCore;
using System.Text.Json;

namespace FEENALOoFINALE.Services
{
    public class BasicPredictionService
    {
        private readonly ApplicationDbContext _context;
        private readonly EquipmentUsageTrackingService _usageService;
        private readonly ILogger<BasicPredictionService> _logger;

        public BasicPredictionService(
            ApplicationDbContext context, 
            EquipmentUsageTrackingService usageService,
            ILogger<BasicPredictionService> logger)
        {
            _context = context;
            _usageService = usageService;
            _logger = logger;
        }

        /// <summary>
        /// Predict equipment failure probability using basic algorithms
        /// </summary>
        public async Task<FailurePrediction> PredictEquipmentFailureAsync(int equipmentId)
        {
            var equipment = await _context.Equipment
                .Include(e => e.EquipmentType)
                .Include(e => e.MaintenanceLogs)
                .FirstOrDefaultAsync(e => e.EquipmentId == equipmentId);

            if (equipment == null)
                throw new ArgumentException("Equipment not found", nameof(equipmentId));

            var prediction = new FailurePrediction
            {
                EquipmentId = equipmentId,
                PredictionDate = DateTime.Now,
                PredictedFailureDate = DateTime.Now.AddYears(1), // Default
                Status = PredictionStatus.Low
            };

            // Factor 1: Equipment Age
            var ageScore = CalculateAgeRiskScore(equipment);
            
            // Factor 2: Usage Patterns
            var usageScore = await CalculateUsageRiskScoreAsync(equipmentId);
            
            // Factor 3: Maintenance History
            var maintenanceScore = CalculateMaintenanceRiskScore(equipment);
            
            // Factor 4: Performance Degradation
            var performanceScore = await CalculatePerformanceRiskScoreAsync(equipmentId);
            
            // Factor 5: Equipment Type Specific Factors
            var typeSpecificScore = CalculateTypeSpecificRiskScore(equipment, usageScore);

            // Combine all factors with weights
            var overallRiskScore = 
                (ageScore * 0.2) +           // 20% weight for age
                (usageScore * 0.25) +        // 25% weight for usage
                (maintenanceScore * 0.2) +   // 20% weight for maintenance history
                (performanceScore * 0.25) +  // 25% weight for performance
                (typeSpecificScore * 0.1);   // 10% weight for type-specific factors

            // Determine risk level and predicted failure date
            prediction.FailureProbability = Math.Round(overallRiskScore, 2);
            
            if (overallRiskScore >= 0.7)
            {
                prediction.Status = PredictionStatus.High;
                prediction.PredictedFailureDate = DateTime.Now.AddDays(30 + new Random().Next(0, 60));
            }
            else if (overallRiskScore >= 0.4)
            {
                prediction.Status = PredictionStatus.Medium;
                prediction.PredictedFailureDate = DateTime.Now.AddDays(90 + new Random().Next(0, 180));
            }
            else
            {
                prediction.Status = PredictionStatus.Low;
                prediction.PredictedFailureDate = DateTime.Now.AddDays(365 + new Random().Next(0, 365));
            }

            // Generate confidence score based on data availability
            prediction.ConfidenceScore = CalculateConfidenceScore(equipment);

            // Create detailed analysis
            prediction.AnalysisDetails = JsonSerializer.Serialize(new
            {
                AgeRisk = Math.Round(ageScore, 3),
                UsageRisk = Math.Round(usageScore, 3),
                MaintenanceRisk = Math.Round(maintenanceScore, 3),
                PerformanceRisk = Math.Round(performanceScore, 3),
                TypeSpecificRisk = Math.Round(typeSpecificScore, 3),
                OverallRisk = Math.Round(overallRiskScore, 3),
                DataQuality = GetDataQualityScore(equipment),
                RecommendedActions = GenerateRecommendations(overallRiskScore, equipment)
            });

            return prediction;
        }

        /// <summary>
        /// Generate predictions for all active equipment
        /// </summary>
        public async Task<List<FailurePrediction>> GeneratePredictionsForAllEquipmentAsync()
        {
            var activeEquipment = await _context.Equipment
                .Where(e => e.Status == EquipmentStatus.Active)
                .Select(e => e.EquipmentId)
                .ToListAsync();

            var predictions = new List<FailurePrediction>();

            foreach (var equipmentId in activeEquipment)
            {
                try
                {
                    var prediction = await PredictEquipmentFailureAsync(equipmentId);
                    predictions.Add(prediction);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Failed to generate prediction for equipment {EquipmentId}", equipmentId);
                }
            }

            return predictions;
        }

        /// <summary>
        /// Update failure predictions in database
        /// </summary>
        public async Task<int> UpdateFailurePredictionsAsync()
        {
            var predictions = await GeneratePredictionsForAllEquipmentAsync();
            var updatedCount = 0;

            foreach (var prediction in predictions)
            {
                var existing = await _context.FailurePredictions
                    .FirstOrDefaultAsync(fp => fp.EquipmentId == prediction.EquipmentId);

                if (existing != null)
                {
                    // Update existing prediction
                    existing.PredictionDate = prediction.PredictionDate;
                    existing.PredictedFailureDate = prediction.PredictedFailureDate;
                    existing.FailureProbability = prediction.FailureProbability;
                    existing.Status = prediction.Status;
                    existing.ConfidenceScore = prediction.ConfidenceScore;
                    existing.AnalysisDetails = prediction.AnalysisDetails;
                }
                else
                {
                    // Create new prediction
                    _context.FailurePredictions.Add(prediction);
                }
                updatedCount++;
            }

            await _context.SaveChangesAsync();
            _logger.LogInformation("Updated {Count} failure predictions", updatedCount);
            return updatedCount;
        }

        private double CalculateAgeRiskScore(Equipment equipment)
        {
            if (!equipment.InstallationDate.HasValue)
                return 0.3; // Moderate risk for unknown age

            var age = DateTime.Now - equipment.InstallationDate.Value;
            var ageInYears = age.TotalDays / 365.25;

            // Risk increases exponentially with age
            return equipment.EquipmentType?.EquipmentTypeName?.ToLower() switch
            {
                var type when type.Contains("projector") => Math.Min(1.0, ageInYears / 5.0), // 5-year lifespan
                var type when type.Contains("computer") => Math.Min(1.0, ageInYears / 6.0), // 6-year lifespan
                var type when type.Contains("air condition") => Math.Min(1.0, ageInYears / 10.0), // 10-year lifespan
                var type when type.Contains("printer") => Math.Min(1.0, ageInYears / 4.0), // 4-year lifespan
                _ => Math.Min(1.0, ageInYears / 7.0) // Default 7-year lifespan
            };
        }

        private async Task<double> CalculateUsageRiskScoreAsync(int equipmentId)
        {
            var recentUsage = await _context.EquipmentUsageLogs
                .Where(ul => ul.EquipmentId == equipmentId && ul.UsageDate >= DateTime.Now.AddDays(-30))
                .ToListAsync();

            if (!recentUsage.Any()) return 0.2; // Low risk for new/unused equipment

            var avgDailyUsage = recentUsage.Average(ul => ul.HoursUsed);
            var maxDailyUsage = recentUsage.Max(ul => ul.HoursUsed);
            var usageVariation = recentUsage.Any() ? 
                recentUsage.Select(ul => ul.HoursUsed).StandardDeviation() : 0;

            // High usage = higher risk
            var usageRisk = Math.Min(1.0, avgDailyUsage / 12.0); // Risk increases after 12 hours/day

            // High variation in usage = higher risk
            var variationRisk = Math.Min(0.3, usageVariation / 10.0);

            return usageRisk + variationRisk;
        }

        private double CalculateMaintenanceRiskScore(Equipment equipment)
        {
            var maintenanceLogs = equipment.MaintenanceLogs ?? new List<MaintenanceLog>();
            
            if (!maintenanceLogs.Any()) return 0.4; // Moderate risk for no maintenance history

            var lastMaintenance = maintenanceLogs.OrderByDescending(ml => ml.LogDate).First();
            var daysSinceLastMaintenance = (DateTime.Now - lastMaintenance.LogDate).TotalDays;

            // Risk increases with time since last maintenance
            var timeRisk = Math.Min(1.0, daysSinceLastMaintenance / 180.0); // 6 months baseline

            // More corrective maintenance = higher risk
            var totalMaintenance = maintenanceLogs.Count;
            var correctiveMaintenance = maintenanceLogs.Count(ml => ml.MaintenanceType == MaintenanceType.Corrective);
            var correctiveRatio = totalMaintenance > 0 ? (double)correctiveMaintenance / totalMaintenance : 0;

            return (timeRisk * 0.7) + (correctiveRatio * 0.3);
        }

        private async Task<double> CalculatePerformanceRiskScoreAsync(int equipmentId)
        {
            var recentUsage = await _context.EquipmentUsageLogs
                .Where(ul => ul.EquipmentId == equipmentId && ul.UsageDate >= DateTime.Now.AddDays(-30))
                .OrderBy(ul => ul.UsageDate)
                .ToListAsync();

            if (recentUsage.Count < 10) return 0.2; // Not enough data

            var efficiencyTrend = CalculateTrend(recentUsage.Select(ul => (double)ul.EfficiencyScore).ToList());
            var temperatureTrend = CalculateTrend(recentUsage.Where(ul => ul.TemperatureReading.HasValue)
                .Select(ul => (double)ul.TemperatureReading!.Value).ToList());

            // Declining efficiency = higher risk
            var efficiencyRisk = efficiencyTrend < -0.5 ? 0.4 : 0.1;

            // Rising temperature = higher risk
            var temperatureRisk = temperatureTrend > 0.5 ? 0.3 : 0.1;

            // Error frequency
            var errorRate = recentUsage.Count(ul => !string.IsNullOrEmpty(ul.ErrorLogs)) / (double)recentUsage.Count;
            var errorRisk = errorRate * 0.5;

            return efficiencyRisk + temperatureRisk + errorRisk;
        }

        private double CalculateTypeSpecificRiskScore(Equipment equipment, double usageScore)
        {
            var equipmentType = equipment.EquipmentType?.EquipmentTypeName?.ToLower() ?? "";

            return equipmentType switch
            {
                var type when type.Contains("projector") => 
                    usageScore * 1.2, // Projectors degrade faster with usage
                var type when type.Contains("printer") => 
                    usageScore * 1.1, // Mechanical wear
                var type when type.Contains("air condition") => 
                    0.1, // Generally reliable
                var type when type.Contains("computer") => 
                    usageScore * 0.8, // Computers are fairly resilient
                _ => usageScore
            };
        }

        private double CalculateConfidenceScore(Equipment equipment)
        {
            var score = 0.5; // Base confidence

            // Age data available
            if (equipment.InstallationDate.HasValue) score += 0.1;

            // Maintenance history available
            if (equipment.MaintenanceLogs?.Any() == true) score += 0.2;

            // Usage data available
            var hasUsageData = _context.EquipmentUsageLogs
                .Any(ul => ul.EquipmentId == equipment.EquipmentId);
            if (hasUsageData) score += 0.2;

            return Math.Min(1.0, score);
        }

        private string GetDataQualityScore(Equipment equipment)
        {
            var qualityFactors = new List<string>();

            if (equipment.InstallationDate.HasValue)
                qualityFactors.Add("Installation Date");

            if (equipment.MaintenanceLogs?.Any() == true)
                qualityFactors.Add("Maintenance History");

            var hasUsageData = _context.EquipmentUsageLogs
                .Any(ul => ul.EquipmentId == equipment.EquipmentId);
            if (hasUsageData)
                qualityFactors.Add("Usage Data");

            return qualityFactors.Count switch
            {
                3 => "High",
                2 => "Medium",
                1 => "Low",
                _ => "Very Low"
            };
        }

        private List<string> GenerateRecommendations(double riskScore, Equipment equipment)
        {
            var recommendations = new List<string>();

            if (riskScore >= 0.7)
            {
                recommendations.Add("Schedule immediate preventive maintenance");
                recommendations.Add("Consider equipment replacement planning");
                recommendations.Add("Increase monitoring frequency");
            }
            else if (riskScore >= 0.4)
            {
                recommendations.Add("Schedule routine maintenance within 30 days");
                recommendations.Add("Monitor performance metrics closely");
                recommendations.Add("Review usage patterns");
            }
            else
            {
                recommendations.Add("Continue routine maintenance schedule");
                recommendations.Add("Monitor for any unusual changes");
            }

            // Type-specific recommendations
            var equipmentType = equipment.EquipmentType?.EquipmentTypeName?.ToLower() ?? "";
            if (equipmentType.Contains("projector"))
            {
                recommendations.Add("Check lamp hours and filter cleanliness");
            }
            else if (equipmentType.Contains("computer"))
            {
                recommendations.Add("Monitor disk space and software updates");
            }
            else if (equipmentType.Contains("air condition"))
            {
                recommendations.Add("Check refrigerant levels and air filters");
            }

            return recommendations;
        }

        private double CalculateTrend(List<double> values)
        {
            if (values.Count < 2) return 0;

            var n = values.Count;
            var sumX = 0.0;
            var sumY = values.Sum();
            var sumXY = 0.0;
            var sumX2 = 0.0;

            for (int i = 0; i < n; i++)
            {
                sumX += i;
                sumXY += i * values[i];
                sumX2 += i * i;
            }

            var slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
            return slope;
        }
    }

    public static class EnumerableExtensions
    {
        public static double StandardDeviation(this IEnumerable<decimal> values)
        {
            var doubleValues = values.Select(v => (double)v);
            return doubleValues.StandardDeviation();
        }

        public static double StandardDeviation(this IEnumerable<double> values)
        {
            var valueList = values.ToList();
            if (valueList.Count <= 1) return 0;

            var average = valueList.Average();
            var sumOfSquaresOfDifferences = valueList.Select(val => (val - average) * (val - average)).Sum();
            return Math.Sqrt(sumOfSquaresOfDifferences / (valueList.Count - 1));
        }
    }
}
