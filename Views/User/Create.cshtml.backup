@model FEENALOoFINALE.Models.RegisterViewModel
@{
    ViewData["Title"] = "Create Account";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Predictive Maintenance</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        /* Animated background particles */
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100%" height="100%" fill="url(%23grid)"/></svg>');
            opacity: 0.3;
            animation: float 20s ease-in-out infinite;
        }

        @@keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }

        .signup-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 25px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            width: 100%;
            max-width: 600px;
            margin: 2rem 1rem;
            position: relative;
            z-index: 10;
            animation: slideUp 0.8s ease-out;
            max-height: 90vh;
            overflow-y: auto;
        }

        @@keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .signup-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 25px 25px 0 0;
            padding: 2.5rem 2rem;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .signup-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: rotate 20s linear infinite;
        }

        @@keyframes rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .logo-container {
            background: rgba(255, 255, 255, 0.2);
            width: 80px;
            height: 80px;
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1.5rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            animation: pulse 2s ease-in-out infinite;
            position: relative;
            z-index: 2;
        }

        @@keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .logo-container i {
            font-size: 2.5rem;
            color: white;
        }

        .signup-title {
            font-size: 2rem;
            font-weight: 600;
            color: white;
            margin-bottom: 0.5rem;
            position: relative;
            z-index: 2;
        }

        .signup-subtitle {
            color: rgba(255, 255, 255, 0.8);
            font-size: 1rem;
            font-weight: 400;
            position: relative;
            z-index: 2;
        }

        .signup-body {
            padding: 2.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
            position: relative;
        }

        .form-label {
            font-weight: 500;
            color: #2c3e50;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        .form-control-modern {
            background: rgba(248, 249, 250, 0.8);
            border: 2px solid rgba(108, 117, 125, 0.2);
            border-radius: 15px;
            padding: 1rem 1rem 1rem 3rem;
            font-size: 1rem;
            transition: all 0.3s ease;
            width: 100%;
        }

        .form-control-modern:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .input-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            font-size: 1.1rem;
            transition: color 0.3s ease;
            z-index: 5;
        }

        .form-control-modern:focus + .input-icon {
            color: #667eea;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .btn-signup {
            background: linear-gradient(135deg, #667eea, #764ba2);
            border: none;
            border-radius: 15px;
            padding: 1rem 2rem;
            font-weight: 600;
            font-size: 1rem;
            color: white;
            width: 100%;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn-signup::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .btn-signup:hover::before {
            left: 100%;
        }

        .btn-signup:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
        }

        .btn-signup:active {
            transform: translateY(-1px);
        }

        .alert-modern {
            background: rgba(220, 53, 69, 0.1);
            border: 1px solid rgba(220, 53, 69, 0.2);
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            color: #dc3545;
            font-size: 0.9rem;
        }

        .login-link {
            text-align: center;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid rgba(108, 117, 125, 0.2);
        }

        .login-link a {
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .login-link a:hover {
            color: #5a6fd8;
            text-decoration: underline;
        }

        .back-link {
            color: #6c757d;
            font-size: 0.9rem;
            transition: color 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            margin-top: 1rem;
        }

        .back-link:hover {
            color: #667eea;
            text-decoration: none;
        }

        .password-help {
            font-size: 0.8rem;
            color: #6c757d;
            margin-top: 0.5rem;
        }

        .floating-shapes {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            z-index: 1;
        }

        .shape {
            position: absolute;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float-shapes 15s ease-in-out infinite;
        }

        .shape:nth-child(1) {
            width: 100px;
            height: 100px;
            top: 20%;
            left: 10%;
            animation-delay: 0s;
        }

        .shape:nth-child(2) {
            width: 60px;
            height: 60px;
            top: 60%;
            right: 15%;
            animation-delay: -5s;
        }

        .shape:nth-child(3) {
            width: 80px;
            height: 80px;
            bottom: 30%;
            left: 20%;
            animation-delay: -10s;
        }

        @@keyframes float-shapes {
            0%, 100% {
                transform: translateY(0px) rotate(0deg);
                opacity: 0.3;
            }
            50% {
                transform: translateY(-30px) rotate(180deg);
                opacity: 0.8;
            }
        }

        /* Responsive Design */
        @@media (max-width: 576px) {
            .signup-container {
                margin: 1rem;
                padding: 0;
                border-radius: 20px;
            }
            
            .signup-header {
                padding: 2rem 1.5rem;
                border-radius: 20px 20px 0 0;
            }
            
            .signup-body {
                padding: 2rem 1.5rem;
            }
            
            .signup-title {
                font-size: 1.5rem;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
        }

        /* Loading animation for button */
        .btn-signup.loading {
            pointer-events: none;
        }

        .btn-signup.loading::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            top: 50%;
            left: 50%;
            margin-left: -10px;
            margin-top: -10px;
            border: 2px solid transparent;
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Validation Status Styles */
        .validation-status {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 16px;
            z-index: 10;
        }
        
        .validation-status.checking {
            color: #ffc107;
        }
        
        .validation-status.valid {
            color: #28a745;
        }
        
        .validation-status.invalid {
            color: #dc3545;
        }
        
        .password-strength {
            margin-top: 5px;
            font-size: 12px;
        }
        
        .strength-weak {
            color: #dc3545;
        }
        
        .strength-medium {
            color: #ffc107;
        }
        
        .strength-strong {
            color: #28a745;
        }
        
        .form-text {
            font-size: 11px;
            color: #6c757d;
            margin-top: 3px;
        }
    </style>
</head>
<body>
    <!-- Floating shapes for decoration -->
    <div class="floating-shapes">
        <div class="shape"></div>
        <div class="shape"></div>
        <div class="shape"></div>
    </div>

    <div class="signup-container">
        <!-- Signup Header -->
        <div class="signup-header">
            <div class="logo-container">
                <i class="bi bi-person-plus-fill"></i>
            </div>
            <h1 class="signup-title">Join ProactED</h1>
            <p class="signup-subtitle">Create your account to access the maintenance dashboard</p>
        </div>

        <!-- Signup Body -->
        <div class="signup-body">
            <!-- Display validation errors -->
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert-modern">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <div>@error.ErrorMessage</div>
                    }
                </div>
            }

            <form asp-action="Create" method="post" id="signupForm">
                @Html.AntiForgeryToken()
                
                <!-- Name Fields -->
                <div class="form-row">
                    <div class="form-group">
                        <label asp-for="FirstName" class="form-label">First Name</label>
                        <div class="position-relative">
                            <input asp-for="FirstName" class="form-control-modern" placeholder="Enter your first name" required />
                            <i class="bi bi-person input-icon"></i>
                        </div>
                        <span asp-validation-for="FirstName" class="text-danger"></span>
                    </div>
                    
                    <div class="form-group">
                        <label asp-for="LastName" class="form-label">Last Name</label>
                        <div class="position-relative">
                            <input asp-for="LastName" class="form-control-modern" placeholder="Enter your last name" required />
                            <i class="bi bi-person input-icon"></i>
                        </div>
                        <span asp-validation-for="LastName" class="text-danger"></span>
                    </div>
                </div>

                <!-- Username -->
                <div class="form-group">
                    <label asp-for="UserName" class="form-label">Username</label>
                    <div class="position-relative">
                        <input asp-for="UserName" class="form-control-modern" placeholder="Choose a username" required />
                        <i class="bi bi-at input-icon"></i>
                        <div class="validation-status" id="username-status"></div>
                    </div>
                    <span asp-validation-for="UserName" class="text-danger"></span>
                </div>

                <!-- Email -->
                <div class="form-group">
                    <label asp-for="Email" class="form-label">Email Address</label>
                    <div class="position-relative">
                        <input asp-for="Email" type="email" class="form-control-modern" placeholder="Enter your email address" required />
                        <i class="bi bi-envelope input-icon"></i>
                        <div class="validation-status" id="email-status"></div>
                    </div>
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>

                <!-- Worker ID -->
                <div class="form-group">
                    <label asp-for="WorkerId" class="form-label">Worker ID</label>
                    <div class="position-relative">
                        <input asp-for="WorkerId" class="form-control-modern" placeholder="e.g., KN1234" required pattern="^[A-Z]{2}\d{4,6}$" />
                        <i class="bi bi-badge-vo input-icon"></i>
                        <div class="validation-status" id="workerid-status"></div>
                    </div>
                    <span asp-validation-for="WorkerId" class="text-danger"></span>
                    <small class="form-text text-muted">Format: XX#### (e.g., KN1234)</small>
                </div>

                <!-- Phone Number -->
                <div class="form-group">
                    <label asp-for="ContactNumber" class="form-label">Contact Number (Optional)</label>
                    <div class="position-relative">
                        <input asp-for="ContactNumber" type="tel" class="form-control-modern" placeholder="Enter your contact number" />
                        <i class="bi bi-telephone input-icon"></i>
                    </div>
                    <span asp-validation-for="ContactNumber" class="text-danger"></span>
                </div>

                <!-- Password Fields -->
                <div class="form-row">
                    <div class="form-group">
                        <label asp-for="Password" class="form-label">Password</label>
                        <div class="position-relative">
                            <input asp-for="Password" type="password" class="form-control-modern" placeholder="Create a password" required />
                            <i class="bi bi-lock input-icon"></i>
                        </div>
                        <span asp-validation-for="Password" class="text-danger"></span>
                        <div class="password-strength" id="password-strength"></div>
                    </div>
                    
                    <div class="form-group">
                        <label asp-for="ConfirmPassword" class="form-label">Confirm Password</label>
                        <div class="position-relative">
                            <input asp-for="ConfirmPassword" type="password" class="form-control-modern" placeholder="Confirm your password" required />
                            <i class="bi bi-lock-fill input-icon"></i>
                        </div>
                        <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                    </div>
                </div>

                <!-- Terms and Conditions -->
                <div class="form-group">
                    <div class="form-check">
                        <input asp-for="AgreeToTerms" class="form-check-input" type="checkbox" required />
                        <label asp-for="AgreeToTerms" class="form-check-label">
                            I agree to the <a href="#" class="text-primary">Terms and Conditions</a>
                        </label>
                    </div>
                    <span asp-validation-for="AgreeToTerms" class="text-danger"></span>
                </div>
                        </div>
                        <div class="password-help">Password must be at least 6 characters long</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="ConfirmPassword" class="form-label">Confirm Password</label>
                        <div class="position-relative">
                            <input type="password" name="ConfirmPassword" id="ConfirmPassword" class="form-control-modern" placeholder="Confirm your password" required />
                            <i class="bi bi-lock-fill input-icon"></i>
                        </div>
                    </div>
                </div>

                <button type="submit" class="btn-signup" id="signupBtn">
                    <i class="bi bi-person-plus me-2"></i>
                    Create Account
                </button>
            </form>

            <!-- Login Link -->
            <div class="login-link">
                <p class="mb-2">Already have an account? <a asp-action="Login">Sign in here</a></p>
                <a asp-controller="Landing" asp-action="Index" class="back-link">
                    <i class="bi bi-arrow-left me-1"></i>Back to Home
                </a>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Real-time validation functions
        let validationTimeouts = {};
        
        // Check username availability
        async function checkUsername(username) {
            if (username.length < 3) return;
            
            const statusElement = document.getElementById('username-status');
            statusElement.innerHTML = '<i class="bi bi-hourglass-split checking"></i>';
            statusElement.className = 'validation-status checking';
            
            try {
                const response = await fetch('/User/CheckUsernameExists?username=' + encodeURIComponent(username));
                const data = await response.json();
                
                if (data.exists) {
                    statusElement.innerHTML = '<i class="bi bi-x-circle invalid"></i>';
                    statusElement.className = 'validation-status invalid';
                } else {
                    statusElement.innerHTML = '<i class="bi bi-check-circle valid"></i>';
                    statusElement.className = 'validation-status valid';
                }
            } catch (error) {
                statusElement.innerHTML = '';
                statusElement.className = 'validation-status';
            }
        }
        
        // Check email availability
        async function checkEmail(email) {
            const emailRegex = new RegExp('^[a-zA-Z0-9.!#' + String.fromCharCode(36) + '%&\'*+/=?^_`{|}~-]+@@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*' + String.fromCharCode(36));
            if (!emailRegex.test(email)) return;
            
            const statusElement = document.getElementById('email-status');
            statusElement.innerHTML = '<i class="bi bi-hourglass-split checking"></i>';
            statusElement.className = 'validation-status checking';
            
            try {
                const response = await fetch('/User/CheckEmailExists?email=' + encodeURIComponent(email));
                const data = await response.json();
                
                if (data.exists) {
                    statusElement.innerHTML = '<i class="bi bi-x-circle invalid"></i>';
                    statusElement.className = 'validation-status invalid';
                } else {
                    statusElement.innerHTML = '<i class="bi bi-check-circle valid"></i>';
                    statusElement.className = 'validation-status valid';
                }
            } catch (error) {
                statusElement.innerHTML = '';
                statusElement.className = 'validation-status';
            }
        }
        
        // Check Worker ID availability
        async function checkWorkerId(workerId) {
            const workerIdRegex = new RegExp('^[A-Z]{2}\\d{4,6}' + String.fromCharCode(36));
            if (!workerIdRegex.test(workerId)) {
                const statusElement = document.getElementById('workerid-status');
                if (workerId.length > 0) {
                    statusElement.innerHTML = '<i class="bi bi-x-circle invalid"></i>';
                    statusElement.className = 'validation-status invalid';
                } else {
                    statusElement.innerHTML = '';
                    statusElement.className = 'validation-status';
                }
                return;
            }
            
            const statusElement = document.getElementById('workerid-status');
            statusElement.innerHTML = '<i class="bi bi-hourglass-split checking"></i>';
            statusElement.className = 'validation-status checking';
            
            try {
                const response = await fetch('/User/CheckWorkerIdExists?workerId=' + encodeURIComponent(workerId));
                const data = await response.json();
                
                if (data.exists) {
                    statusElement.innerHTML = '<i class="bi bi-x-circle invalid"></i>';
                    statusElement.className = 'validation-status invalid';
                } else {
                    statusElement.innerHTML = '<i class="bi bi-check-circle valid"></i>';
                    statusElement.className = 'validation-status valid';
                }
            } catch (error) {
                statusElement.innerHTML = '';
                statusElement.className = 'validation-status';
            }
        }
        
        // Password strength checker
        function checkPasswordStrength(password) {
            const strengthElement = document.getElementById('password-strength');
            
            if (password.length === 0) {
                strengthElement.innerHTML = '';
                return;
            }
            
            let score = 0;
            let feedback = [];
            
            // Length check
            if (password.length >= 8) score++;
            else feedback.push('At least 8 characters');
            
            // Uppercase check
            const upperRegex = new RegExp('[A-Z]');
            if (upperRegex.test(password)) score++;
            else feedback.push('One uppercase letter');
            
            // Lowercase check
            const lowerRegex = new RegExp('[a-z]');
            if (lowerRegex.test(password)) score++;
            else feedback.push('One lowercase letter');
            
            // Number check
            const numberRegex = new RegExp('\\d');
            if (numberRegex.test(password)) score++;
            else feedback.push('One number');
            
            // Special character check
            const specialRegex = new RegExp('[@' + String.fromCharCode(36) + '!%*?&]');
            if (specialRegex.test(password)) score++;
            else feedback.push('One special character');
            
            let strengthText = '';
            let strengthClass = '';
            
            if (score < 3) {
                strengthText = 'Weak';
                strengthClass = 'strength-weak';
            } else if (score < 5) {
                strengthText = 'Medium';
                strengthClass = 'strength-medium';
            } else {
                strengthText = 'Strong';
                strengthClass = 'strength-strong';
            }
            
            if (feedback.length > 0) {
                strengthElement.innerHTML = '<span class="' + strengthClass + '">Password strength: ' + strengthText + '</span><br><small>Missing: ' + feedback.join(', ') + '</small>';
            } else {
                strengthElement.innerHTML = '<span class="' + strengthClass + '">Password strength: ' + strengthText + '</span>';
            }
        }
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Username validation
            const usernameField = document.getElementById('UserName');
            if (usernameField) {
                usernameField.addEventListener('input', function() {
                    clearTimeout(validationTimeouts.username);
                    validationTimeouts.username = setTimeout(() => {
                        checkUsername(this.value);
                    }, 500);
                });
            }
            
            // Email validation
            const emailField = document.getElementById('Email');
            if (emailField) {
                emailField.addEventListener('input', function() {
                    clearTimeout(validationTimeouts.email);
                    validationTimeouts.email = setTimeout(() => {
                        checkEmail(this.value);
                    }, 500);
                });
            }
            
            // Worker ID validation
            const workerIdField = document.getElementById('WorkerId');
            if (workerIdField) {
                workerIdField.addEventListener('input', function() {
                    // Convert to uppercase
                    this.value = this.value.toUpperCase();
                    
                    clearTimeout(validationTimeouts.workerId);
                    validationTimeouts.workerId = setTimeout(() => {
                        checkWorkerId(this.value);
                    }, 500);
                });
            }
            
            // Password strength
            const passwordField = document.getElementById('Password');
            if (passwordField) {
                passwordField.addEventListener('input', function() {
                    checkPasswordStrength(this.value);
                });
            }
            
            // Password confirmation
            const confirmPasswordField = document.getElementById('ConfirmPassword');
            if (confirmPasswordField && passwordField) {
                confirmPasswordField.addEventListener('input', function() {
                    const password = passwordField.value;
                    const confirmPassword = this.value;
                    
                    if (confirmPassword.length > 0) {
                        if (password === confirmPassword) {
                            this.setCustomValidity('');
                            this.style.borderColor = '#28a745';
                        } else {
                            this.setCustomValidity('Passwords do not match');
                            this.style.borderColor = '#dc3545';
                        }
                    } else {
                        this.setCustomValidity('');
                        this.style.borderColor = '';
                    }
                });
            }
        });
        
        // Add loading animation on form submit
        const signupForm = document.getElementById('signupForm');
        if (signupForm) {
            signupForm.addEventListener('submit', function() {
                const btn = document.getElementById('signupBtn');
                if (btn) {
                    btn.classList.add('loading');
                    btn.innerHTML = '<span style="opacity: 0;">Creating Account...</span>';
                }
            });
        }
    </script>
            
            if (password !== confirmPassword) {
                this.setCustomValidity('Passwords do not match');
                this.style.borderColor = '#dc3545';
            } else {
                this.setCustomValidity('');
                this.style.borderColor = '';
            }
        });

        // Add focus effects for better UX
        document.querySelectorAll('.form-control-modern').forEach(input => {
            input.addEventListener('focus', function() {
                this.parentElement.style.transform = 'scale(1.02)';
            });
            
            input.addEventListener('blur', function() {
                this.parentElement.style.transform = 'scale(1)';
            });
        });

        // Auto-focus on first name field
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelector('input[name="FirstName"]').focus();
        });
    </script>
</body>
</html>
