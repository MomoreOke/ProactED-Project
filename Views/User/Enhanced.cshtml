@model FEENALOoFINALE.Models.ViewModels.UserManagementViewModel
@using FEENALOoFINALE.Models.ViewModels

@{
    ViewData["Title"] = "User Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
    
    // Configure DataTable columns
    var columns = new List<DataTableColumn>
    {
        new DataTableColumn { PropertyName = "FullName", DisplayName = "Full Name", Sortable = true },
        new DataTableColumn { PropertyName = "Email", DisplayName = "Email", Sortable = true },
        new DataTableColumn { PropertyName = "UserName", DisplayName = "Username", Sortable = true },
        new DataTableColumn { PropertyName = "PhoneNumber", DisplayName = "Phone", Sortable = false },
        new DataTableColumn { PropertyName = "StatusText", DisplayName = "Status", Sortable = true, Type = DataTableColumnType.Badge },
        new DataTableColumn { PropertyName = "LastLoginDate", DisplayName = "Last Login", Sortable = true, Type = DataTableColumnType.Date }
    };
    
    // Configure DataTable actions
    var actions = new List<DataTableAction>
    {
        new DataTableAction { Id = "view", Text = "View", Icon = "bi-eye", Color = "info", Controller = "User", Action = "Details", RouteProperty = "Id" },
        new DataTableAction { Id = "edit", Text = "Edit", Icon = "bi-pencil", Color = "primary", Controller = "User", Action = "Edit", RouteProperty = "Id" },
        new DataTableAction { Id = "verify", Text = "Verify Email", Icon = "bi-check-circle", Color = "success", Controller = "User", Action = "VerifyEmail", RouteProperty = "Id" },
        new DataTableAction { Id = "delete", Text = "Delete", Icon = "bi-trash", Color = "danger", Controller = "User", Action = "Delete", RouteProperty = "Id", RequiresConfirmation = true, ConfirmationMessage = "Are you sure you want to delete this user?" }
    };
    
    ViewBag.TableId = "userTable";
    ViewBag.Columns = columns;
    ViewBag.Actions = actions;
    ViewBag.Data = Model.Users;
    ViewBag.ShowSearch = true;
    ViewBag.ShowFilters = true;
    ViewBag.ShowPagination = true;
    ViewBag.ShowExport = Model.CanExport;
    ViewBag.AllowSelection = true;
}

@section Styles {
    <style>
        .enhanced-user-container {
            background: #f8f9fa;
            min-height: 100vh;
            padding: 2rem 0;
        }
        
        .user-header {
            background: linear-gradient(135deg, #4CAF50 0%, #2E7D32 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 0.5rem;
        }
        
        .stats-card {
            background: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border-left: 4px solid;
            margin-bottom: 1rem;
            transition: transform 0.2s ease;
        }
        
        .stats-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        
        .stats-card.primary { border-color: #007bff; }
        .stats-card.success { border-color: #28a745; }
        .stats-card.warning { border-color: #ffc107; }
        .stats-card.danger { border-color: #dc3545; }
        
        .filters-container {
            background: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
            display: none;
        }
        
        .filters-container.show {
            display: block;
            animation: slideDown 0.3s ease-out;
        }
        
        @@keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .filter-badge {
            background: #e8f5e8;
            color: #2e7d32;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.875rem;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
            display: inline-block;
        }
        
        .bulk-actions {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 0.75rem 1rem;
            border-radius: 0.25rem;
            margin-bottom: 1rem;
            display: none;
        }
        
        .bulk-actions.show {
            display: block;
        }
        
        .user-table-container {
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
    </style>
}

<div class="enhanced-user-container">
    <div class="container-fluid">
        <!-- Header Section -->
        <div class="user-header">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1 class="mb-2">
                            <i class="bi bi-people-fill me-2"></i>
                            User Management
                        </h1>
                        <p class="mb-0 opacity-75">Manage user accounts, permissions, and access control</p>
                    </div>
                    <div class="col-md-4 text-end">
                        <div class="btn-group">
                            <a href="@Url.Action("Create", "User")" class="btn btn-light">
                                <i class="bi bi-person-plus me-1"></i>
                                Add User
                            </a>
                            <button type="button" class="btn btn-outline-light" onclick="exportData('csv')">
                                <i class="bi bi-download me-1"></i>
                                Export
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="container mb-4">
            <div class="row">
                <div class="col-md-3">
                    <div class="stats-card primary">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="mb-1">@Model.Statistics.TotalUsers</h3>
                                <p class="text-muted mb-0">Total Users</p>
                            </div>
                            <div class="text-primary">
                                <i class="bi bi-people fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stats-card success">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="mb-1">@Model.Statistics.ActiveUsers</h3>
                                <p class="text-muted mb-0">Active Users</p>
                            </div>
                            <div class="text-success">
                                <i class="bi bi-person-check fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stats-card warning">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="mb-1">@Model.Statistics.UnconfirmedUsers</h3>
                                <p class="text-muted mb-0">Unverified</p>
                            </div>
                            <div class="text-warning">
                                <i class="bi bi-person-exclamation fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stats-card danger">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="mb-1">@Model.Statistics.InactiveUsers</h3>
                                <p class="text-muted mb-0">Inactive</p>
                            </div>
                            <div class="text-danger">
                                <i class="bi bi-person-x fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters and Actions -->
        <div class="container">
            <div class="row mb-3">
                <div class="col-md-6">
                    <button type="button" class="btn btn-outline-primary" onclick="toggleFilters()">
                        <i class="bi bi-funnel me-1"></i>
                        Filters
                        <span class="badge bg-primary ms-1" id="active-filters-count" style="display: none;">0</span>
                    </button>
                    <button type="button" class="btn btn-outline-secondary ms-2" onclick="clearAllFilters()">
                        <i class="bi bi-x-circle me-1"></i>
                        Clear All
                    </button>
                </div>
                <div class="col-md-6 text-end">
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-secondary" onclick="toggleSelectAll()">
                            <i class="bi bi-check-square me-1"></i>
                            Select All
                        </button>
                        <div class="btn-group">
                            <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                                <i class="bi bi-three-dots me-1"></i>
                                Bulk Actions
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" onclick="bulkAction('verify')">
                                    <i class="bi bi-check-circle me-2"></i>Verify Selected
                                </a></li>
                                <li><a class="dropdown-item" href="#" onclick="bulkAction('lock')">
                                    <i class="bi bi-lock me-2"></i>Lock Selected
                                </a></li>
                                <li><a class="dropdown-item" href="#" onclick="bulkAction('unlock')">
                                    <i class="bi bi-unlock me-2"></i>Unlock Selected
                                </a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item text-danger" href="#" onclick="bulkAction('delete')">
                                    <i class="bi bi-trash me-2"></i>Delete Selected
                                </a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filters Container -->
            <div id="filters-container" class="filters-container">
                <form method="get" id="filter-form">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="form-label">Search</label>
                            <input type="text" class="form-control" name="searchTerm" value="@Model.SearchTerm" placeholder="Search users...">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" name="statusFilter" multiple>
                                @foreach (var status in Model.FilterOptions.Statuses)
                                {
                                    <option value="@status.Status">@status.Name (@status.Count)</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Sort By</label>
                            <select class="form-select" name="sortBy">
                                <option value="FullName" selected="@(Model.SortBy == "FullName")">Full Name</option>
                                <option value="Email" selected="@(Model.SortBy == "Email")">Email</option>
                                <option value="UserName" selected="@(Model.SortBy == "UserName")">Username</option>
                                <option value="LastLogin" selected="@(Model.SortBy == "LastLogin")">Last Login</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Direction</label>
                            <select class="form-select" name="sortDirection">
                                <option value="asc" selected="@(Model.SortDirection == "asc")">Ascending</option>
                                <option value="desc" selected="@(Model.SortDirection == "desc")">Descending</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-search me-1"></i>
                                Apply Filters
                            </button>
                            <button type="button" class="btn btn-secondary ms-2" onclick="clearAllFilters()">
                                <i class="bi bi-x-circle me-1"></i>
                                Clear
                            </button>
                        </div>
                    </div>
                </form>
            </div>

            <!-- Enhanced Data Table -->
            <div class="user-table-container">
                @await Html.PartialAsync("_EnhancedDataTable", Model)
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // User Management JavaScript
        let selectedItems = new Set();
        let allFilters = {};

        // Toggle filters panel
        function toggleFilters() {
            const container = document.getElementById('filters-container');
            container.classList.toggle('show');
        }

        // Clear all filters
        function clearAllFilters() {
            const form = document.querySelector('#filter-form');
            if (form) {
                form.reset();
                allFilters = {};
                form.submit();
            }
        }

        // Toggle select all checkbox
        function toggleSelectAll() {
            const checkboxes = document.querySelectorAll('.row-checkbox');
            const selectAllBtn = document.querySelector('[onclick="toggleSelectAll()"]');
            
            if (selectedItems.size === checkboxes.length) {
                checkboxes.forEach(cb => {
                    cb.checked = false;
                    selectedItems.delete(cb.value);
                });
                selectAllBtn.innerHTML = '<i class="bi bi-check-square me-1"></i>Select All';
            } else {
                checkboxes.forEach(cb => {
                    cb.checked = true;
                    selectedItems.add(cb.value);
                });
                selectAllBtn.innerHTML = '<i class="bi bi-square me-1"></i>Deselect All';
            }
            
            updateBulkActionsBar();
        }

        // Handle individual checkbox changes
        function handleCheckboxChange(checkbox) {
            if (checkbox.checked) {
                selectedItems.add(checkbox.value);
            } else {
                selectedItems.delete(checkbox.value);
            }
            updateBulkActionsBar();
        }

        // Update bulk actions bar
        function updateBulkActionsBar() {
            const bulkBar = document.getElementById('bulk-actions-bar');
            const countSpan = document.getElementById('selected-count');
            
            if (selectedItems.size > 0) {
                if (bulkBar) bulkBar.classList.add('show');
                if (countSpan) countSpan.textContent = `${selectedItems.size} item${selectedItems.size > 1 ? 's' : ''} selected`;
            } else {
                if (bulkBar) bulkBar.classList.remove('show');
            }
        }

        // Perform bulk action
        async function bulkAction(action) {
            if (selectedItems.size === 0) {
                alert('Please select users first.');
                return;
            }

            const confirmMessage = `Are you sure you want to ${action} ${selectedItems.size} user(s)?`;
            if ((action === 'delete' || action === 'lock') && !confirm(confirmMessage)) {
                return;
            }

            try {
                const response = await fetch('/User/BulkUserAction', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({
                        action: action,
                        selectedIds: Array.from(selectedItems)
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    showNotification(result.message || `${action} completed successfully`, 'success');
                    location.reload();
                } else {
                    showNotification(result.message || `Failed to ${action} users`, 'error');
                }
            } catch (error) {
                showNotification(`Error performing ${action}: ${error.message}`, 'error');
            }
        }

        // Export data
        function exportData(format) {
            const url = new URL('/User/ExportUsers', window.location.origin);
            url.searchParams.set('format', format);
            
            // Add current search and filters
            const searchTerm = document.querySelector('[name="searchTerm"]')?.value;
            if (searchTerm) {
                url.searchParams.set('searchTerm', searchTerm);
            }
            
            window.open(url.href, '_blank');
        }

        // Show notification
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.row-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', () => handleCheckboxChange(checkbox));
            });
        });
    </script>
}
