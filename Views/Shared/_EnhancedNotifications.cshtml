@model FEENALOoFINALE.Models.ViewModels.NotificationViewModel

@{
    var settings = Model?.Settings ?? new FEENALOoFINALE.Models.ViewModels.NotificationSettings();
    var messages = Model?.Messages ?? new List<FEENALOoFINALE.Models.ViewModels.NotificationMessage>();
}

<!-- Notification Container -->
<div id="notificationContainer" class="notification-container position-fixed" 
     data-position="@settings.Position"
     data-auto-close="@settings.EnableAutoClose.ToString().ToLower()"
     data-auto-close-delay="@settings.AutoCloseDelay"
     data-max-visible="@settings.MaxVisible"
     data-enable-stacking="@settings.EnableStacking.ToString().ToLower()">
    
    @foreach (var message in messages)
    {
        <div class="notification-item alert alert-@GetAlertClass(message.Type) alert-dismissible fade show"
             data-notification-id="@message.Id"
             data-auto-dismiss="@(message.AutoDismissAfterSeconds?.ToString() ?? "")"
             role="alert">
            
            <div class="d-flex align-items-start">
                <div class="notification-icon me-3">
                    <i class="@GetIconClass(message.Type)"></i>
                </div>
                
                <div class="notification-content flex-grow-1">
                    @if (!string.IsNullOrEmpty(message.Title))
                    {
                        <h6 class="notification-title mb-1">@message.Title</h6>
                    }
                    <div class="notification-message">@Html.Raw(message.Message)</div>
                    
                    @if (!string.IsNullOrEmpty(message.ActionText) && !string.IsNullOrEmpty(message.ActionUrl))
                    {
                        <div class="notification-action mt-2">
                            <a href="@message.ActionUrl" class="btn btn-sm btn-outline-@GetButtonClass(message.Type)">
                                @message.ActionText
                            </a>
                        </div>
                    }
                </div>
                
                @if (message.IsDismissible)
                {
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close"></button>
                }
            </div>
            
            <div class="notification-timestamp">
                <small class="text-muted">@message.Timestamp.ToString("HH:mm")</small>
            </div>
        </div>
    }
</div>

<!-- Toast Template for Dynamic Notifications -->
<div id="notificationTemplate" class="d-none">
    <div class="notification-item alert alert-dismissible fade show" role="alert">
        <div class="d-flex align-items-start">
            <div class="notification-icon me-3">
                <i class="notification-icon-placeholder"></i>
            </div>
            
            <div class="notification-content flex-grow-1">
                <h6 class="notification-title mb-1"></h6>
                <div class="notification-message"></div>
                <div class="notification-action mt-2"></div>
            </div>
            
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        
        <div class="notification-timestamp">
            <small class="text-muted"></small>
        </div>
    </div>
</div>

<style>
    .notification-container {
        z-index: 1055;
        pointer-events: none;
        max-width: 420px;
        width: 100%;
    }
    
    .notification-container[data-position="top-right"] {
        top: 20px;
        right: 20px;
    }
    
    .notification-container[data-position="top-left"] {
        top: 20px;
        left: 20px;
    }
    
    .notification-container[data-position="bottom-right"] {
        bottom: 20px;
        right: 20px;
    }
    
    .notification-container[data-position="bottom-left"] {
        bottom: 20px;
        left: 20px;
    }
    
    .notification-container[data-position="top-center"] {
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
    }
    
    .notification-container[data-position="bottom-center"] {
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
    }
    
    .notification-item {
        pointer-events: auto;
        margin-bottom: 15px;
        border: none;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        animation: slideInNotification 0.3s ease-out;
        position: relative;
        overflow: hidden;
    }
    
    .notification-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 4px;
        height: 100%;
    }
    
    .notification-item.alert-success::before {
        background: linear-gradient(135deg, #28a745, #20c997);
    }
    
    .notification-item.alert-info::before {
        background: linear-gradient(135deg, #17a2b8, #007bff);
    }
    
    .notification-item.alert-warning::before {
        background: linear-gradient(135deg, #ffc107, #fd7e14);
    }
    
    .notification-item.alert-danger::before {
        background: linear-gradient(135deg, #dc3545, #e83e8c);
    }
    
    .notification-icon {
        font-size: 1.25rem;
        width: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .notification-title {
        font-weight: 600;
        font-size: 0.95rem;
    }
    
    .notification-message {
        font-size: 0.875rem;
        line-height: 1.4;
    }
    
    .notification-timestamp {
        position: absolute;
        top: 8px;
        right: 40px;
        font-size: 0.75rem;
    }
    
    .notification-action .btn {
        padding: 0.25rem 0.75rem;
        font-size: 0.8rem;
    }
    
    @@keyframes slideInNotification {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @@keyframes slideOutNotification {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
    
    .notification-item.fade-out {
        animation: slideOutNotification 0.3s ease-in;
    }
    
    /* Dark mode support */
    [data-theme="dark"] .notification-item {
        background: rgba(30, 30, 45, 0.95);
        color: #ffffff;
        border-color: rgba(255, 255, 255, 0.1);
    }
    
    [data-theme="dark"] .notification-timestamp .text-muted {
        color: #a0a0a0 !important;
    }
</style>

<script>
    class NotificationManager {
        constructor(options = {}) {
            this.container = document.getElementById('notificationContainer');
            this.template = document.getElementById('notificationTemplate');
            this.settings = {
                position: this.container.dataset.position || 'top-right',
                autoClose: this.container.dataset.autoClose === 'true',
                autoCloseDelay: parseInt(this.container.dataset.autoCloseDelay) || 5000,
                maxVisible: parseInt(this.container.dataset.maxVisible) || 5,
                enableStacking: this.container.dataset.enableStacking === 'true',
                enableSounds: options.enableSounds || false,
                ...options
            };
            
            this.init();
        }
        
        init() {
            // Auto-dismiss existing notifications
            this.setupAutoClose();
            
            // Handle manual dismissals
            this.container.addEventListener('closed.bs.alert', (e) => {
                this.onNotificationClosed(e.target);
            });
        }
        
        show(message, type = 'info', options = {}) {
            const notification = this.createNotification(message, type, options);
            this.addNotification(notification);
            return notification;
        }
        
        success(message, options = {}) {
            return this.show(message, 'success', options);
        }
        
        info(message, options = {}) {
            return this.show(message, 'info', options);
        }
        
        warning(message, options = {}) {
            return this.show(message, 'warning', options);
        }
        
        error(message, options = {}) {
            return this.show(message, 'danger', options);
        }
        
        createNotification(message, type, options) {
            const template = this.template.querySelector('.notification-item').cloneNode(true);
            const id = 'notification_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            
            template.setAttribute('data-notification-id', id);
            template.className = `notification-item alert alert-${type} alert-dismissible fade show`;
            
            // Set icon
            const iconElement = template.querySelector('.notification-icon-placeholder');
            iconElement.className = this.getIconClass(type);
            
            // Set title
            const titleElement = template.querySelector('.notification-title');
            if (options.title) {
                titleElement.textContent = options.title;
            } else {
                titleElement.remove();
            }
            
            // Set message
            const messageElement = template.querySelector('.notification-message');
            if (options.html) {
                messageElement.innerHTML = message;
            } else {
                messageElement.textContent = message;
            }
            
            // Set action
            const actionElement = template.querySelector('.notification-action');
            if (options.actionText && options.actionUrl) {
                const button = document.createElement('a');
                button.href = options.actionUrl;
                button.className = `btn btn-sm btn-outline-${this.getButtonClass(type)}`;
                button.textContent = options.actionText;
                actionElement.appendChild(button);
            } else {
                actionElement.remove();
            }
            
            // Set timestamp
            const timestampElement = template.querySelector('.notification-timestamp small');
            timestampElement.textContent = new Date().toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit'
            });
            
            // Set auto-dismiss
            if (options.autoDismiss !== false && this.settings.autoClose) {
                const delay = options.autoDismissDelay || this.settings.autoCloseDelay;
                template.setAttribute('data-auto-dismiss', delay);
            }
            
            return template;
        }
        
        addNotification(notification) {
            // Check max visible limit
            const existingNotifications = this.container.querySelectorAll('.notification-item');
            if (existingNotifications.length >= this.settings.maxVisible) {
                const oldest = existingNotifications[0];
                this.removeNotification(oldest);
            }
            
            // Add new notification
            this.container.appendChild(notification);
            
            // Setup auto-close
            const autoDismiss = notification.getAttribute('data-auto-dismiss');
            if (autoDismiss) {
                setTimeout(() => {
                    this.removeNotification(notification);
                }, parseInt(autoDismiss));
            }
            
            // Play sound if enabled
            if (this.settings.enableSounds) {
                this.playNotificationSound();
            }
        }
        
        removeNotification(notification) {
            if (notification && notification.parentNode) {
                notification.classList.add('fade-out');
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }
        }
        
        setupAutoClose() {
            const notifications = this.container.querySelectorAll('[data-auto-dismiss]');
            notifications.forEach(notification => {
                const delay = parseInt(notification.getAttribute('data-auto-dismiss'));
                if (delay) {
                    setTimeout(() => {
                        this.removeNotification(notification);
                    }, delay);
                }
            });
        }
        
        onNotificationClosed(notification) {
            // Handle cleanup if needed
        }
        
        getIconClass(type) {
            const icons = {
                success: 'bi bi-check-circle-fill',
                info: 'bi bi-info-circle-fill',
                warning: 'bi bi-exclamation-triangle-fill',
                danger: 'bi bi-x-circle-fill'
            };
            return icons[type] || icons.info;
        }
        
        getButtonClass(type) {
            const classes = {
                success: 'success',
                info: 'info',
                warning: 'warning',
                danger: 'danger'
            };
            return classes[type] || 'primary';
        }
        
        playNotificationSound() {
            // Play notification sound (optional)
            if ('Audio' in window) {
                const audio = new Audio('/sounds/notification.mp3');
                audio.volume = 0.3;
                audio.play().catch(() => {
                    // Ignore errors if sound can't be played
                });
            }
        }
        
        clear() {
            const notifications = this.container.querySelectorAll('.notification-item');
            notifications.forEach(notification => {
                this.removeNotification(notification);
            });
        }
    }
    
    // Initialize notification manager
    window.notifications = new NotificationManager();
    
    // Add to global scope for easy access
    window.showNotification = (message, type, options) => {
        return window.notifications.show(message, type, options);
    };
    
    window.showSuccess = (message, options) => {
        return window.notifications.success(message, options);
    };
    
    window.showError = (message, options) => {
        return window.notifications.error(message, options);
    };
    
    window.showWarning = (message, options) => {
        return window.notifications.warning(message, options);
    };
    
    window.showInfo = (message, options) => {
        return window.notifications.info(message, options);
    };
</script>

@functions {
    private string GetAlertClass(FEENALOoFINALE.Models.ViewModels.NotificationType type)
    {
        return type switch
        {
            FEENALOoFINALE.Models.ViewModels.NotificationType.Success => "success",
            FEENALOoFINALE.Models.ViewModels.NotificationType.Info => "info",
            FEENALOoFINALE.Models.ViewModels.NotificationType.Warning => "warning",
            FEENALOoFINALE.Models.ViewModels.NotificationType.Error => "danger",
            _ => "info"
        };
    }
    
    private string GetIconClass(FEENALOoFINALE.Models.ViewModels.NotificationType type)
    {
        return type switch
        {
            FEENALOoFINALE.Models.ViewModels.NotificationType.Success => "bi bi-check-circle-fill",
            FEENALOoFINALE.Models.ViewModels.NotificationType.Info => "bi bi-info-circle-fill",
            FEENALOoFINALE.Models.ViewModels.NotificationType.Warning => "bi bi-exclamation-triangle-fill",
            FEENALOoFINALE.Models.ViewModels.NotificationType.Error => "bi bi-x-circle-fill",
            _ => "bi bi-info-circle-fill"
        };
    }
    
    private string GetButtonClass(FEENALOoFINALE.Models.ViewModels.NotificationType type)
    {
        return type switch
        {
            FEENALOoFINALE.Models.ViewModels.NotificationType.Success => "success",
            FEENALOoFINALE.Models.ViewModels.NotificationType.Info => "info",
            FEENALOoFINALE.Models.ViewModels.NotificationType.Warning => "warning",
            FEENALOoFINALE.Models.ViewModels.NotificationType.Error => "danger",
            _ => "primary"
        };
    }
}
