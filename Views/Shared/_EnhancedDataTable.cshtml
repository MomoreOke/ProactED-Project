@using FEENALOoFINALE.Models.ViewModels
@model FEENALOoFINALE.Models.ViewModels.PaginatedViewModel

@{
    var tableId = ViewBag.TableId ?? "dataTable";
    var columns = ViewBag.Columns as List<DataTableColumn> ?? new List<DataTableColumn>();
    var actions = ViewBag.Actions as List<DataTableAction> ?? new List<DataTableAction>();
    var data = ViewBag.Data ?? new List<object>();
    var showSearch = ViewBag.ShowSearch ?? true;
    var showFilters = ViewBag.ShowFilters ?? true;
    var showPagination = ViewBag.ShowPagination ?? true;
    var showExport = ViewBag.ShowExport ?? false;
    var allowSelection = ViewBag.AllowSelection ?? false;
}

<div class="enhanced-datatable" data-table-id="@tableId">
    <!-- Table Header Controls -->
    <div class="datatable-header">
        <div class="row align-items-center mb-3">
            <!-- Search and Filters -->
            <div class="col-md-8">
                @if (showSearch)
                {
                    <div class="d-flex gap-2">
                        <div class="search-container flex-grow-1">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" 
                                       class="form-control" 
                                       id="@(tableId)_search" 
                                       placeholder="Search..." 
                                       value="@Model.SearchTerm">
                            </div>
                        </div>
                        
                        @if (showFilters)
                        {
                            <button type="button" 
                                    class="btn btn-outline-secondary" 
                                    id="@(tableId)_filterToggle">
                                <i class="bi bi-funnel"></i> Filters
                                @if (Model.Filters.Any())
                                {
                                    <span class="badge bg-primary ms-1">@Model.Filters.Count</span>
                                }
                            </button>
                        }
                    </div>
                }
            </div>
            
            <!-- Actions and Controls -->
            <div class="col-md-4 text-end">
                <div class="btn-group" role="group">
                    <!-- View Mode Toggle -->
                    <div class="btn-group" role="group">
                        <button type="button" 
                                class="btn btn-outline-secondary @(Model.ViewMode == "table" ? "active" : "")"
                                data-view-mode="table">
                            <i class="bi bi-table"></i>
                        </button>
                        <button type="button" 
                                class="btn btn-outline-secondary @(Model.ViewMode == "grid" ? "active" : "")"
                                data-view-mode="grid">
                            <i class="bi bi-grid"></i>
                        </button>
                    </div>
                    
                    @if (showExport)
                    {
                        <div class="btn-group">
                            <button type="button" 
                                    class="btn btn-outline-secondary dropdown-toggle" 
                                    data-bs-toggle="dropdown">
                                <i class="bi bi-download"></i> Export
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" data-export="csv">
                                    <i class="bi bi-file-earmark-text"></i> CSV
                                </a></li>
                                <li><a class="dropdown-item" href="#" data-export="excel">
                                    <i class="bi bi-file-earmark-excel"></i> Excel
                                </a></li>
                                <li><a class="dropdown-item" href="#" data-export="pdf">
                                    <i class="bi bi-file-earmark-pdf"></i> PDF
                                </a></li>
                            </ul>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <!-- Filters Panel -->
        @if (showFilters)
        {
            <div class="filter-panel" id="@(tableId)_filters" style="display: @(Model.ShowFilters ? "block" : "none")">
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            @await Html.PartialAsync("_TableFilters", Model)
                        </div>
                        <div class="text-end mt-3">
                            <button type="button" class="btn btn-secondary me-2" id="@(tableId)_clearFilters">
                                Clear Filters
                            </button>
                            <button type="button" class="btn btn-primary" id="@(tableId)_applyFilters">
                                Apply Filters
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <!-- Data Table -->
    <div class="table-responsive">
        <table class="table table-hover" id="@tableId">
            <thead class="table-light">
                <tr>
                    @if (allowSelection)
                    {
                        <th width="40">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="@(tableId)_selectAll">
                            </div>
                        </th>
                    }
                    
                    @foreach (var column in columns)
                    {
                        <th class="@(column.Sortable ? "sortable" : "")" 
                            data-column="@column.PropertyName"
                            @(column.Width.HasValue ? $"width=\"{column.Width}\"" : "")>
                            @column.DisplayName
                            @if (column.Sortable)
                            {
                                <i class="bi bi-arrow-down-up text-muted ms-1"></i>
                            }
                        </th>
                    }
                    
                    @if (actions.Any())
                    {
                        <th width="120" class="text-end">Actions</th>
                    }
                </tr>
            </thead>
            <tbody>
                @{
                    var dataList = data as IEnumerable<object> ?? new List<object>();
                }
                @if (dataList.Any())
                {
                    @foreach (var item in dataList)
                    {
                        <tr>
                            @if (allowSelection)
                            {
                                <td>
                                    <input type="checkbox" class="form-check-input row-checkbox" value="@item.GetType().GetProperty("Id")?.GetValue(item)" />
                                </td>
                            }
                            
                            @foreach (var column in columns)
                            {
                                <td>
                                    @if (column.IsHtml)
                                    {
                                        @Html.Raw(item.GetType().GetProperty(column.PropertyName)?.GetValue(item)?.ToString() ?? "")
                                    }
                                    else
                                    {
                                        @(item.GetType().GetProperty(column.PropertyName)?.GetValue(item)?.ToString() ?? "")
                                    }
                                </td>
                            }
                            
                            @if (actions.Any())
                            {
                                <td class="text-end">
                                    @foreach (var action in actions)
                                    {
                                        <a href="@Url.Action(action.Action, action.Controller, new { id = item.GetType().GetProperty(action.RouteProperty ?? "Id")?.GetValue(item) })" 
                                           class="btn @action.CssClass btn-@action.Color" 
                                           title="@action.Text">
                                            <i class="@action.Icon"></i>
                                        </a>
                                    }
                                </td>
                            }
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="@(columns.Count + (allowSelection ? 1 : 0) + (actions.Any() ? 1 : 0))" class="text-center py-4 text-muted">
                            No data available
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
    <!-- Table Footer -->
    <div class="datatable-footer">
        <div class="row align-items-center">
            <div class="col-md-6">
                <div class="datatable-info">
                    Showing @Model.StartRecord to @Model.EndRecord of @Model.TotalRecords entries
                    @if (!string.IsNullOrEmpty(Model.SearchTerm) || Model.Filters.Any())
                    {
                        <span class="text-muted">(filtered from @Model.TotalRecords total entries)</span>
                    }
                </div>
            </div>
            
            @if (showPagination && Model.TotalPages > 1)
            {
                <div class="col-md-6">
                    <nav aria-label="Table pagination">
                        <ul class="pagination justify-content-end mb-0">
                            <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                                <a class="page-link" href="#" data-page="@(Model.CurrentPage - 1)">
                                    <i class="bi bi-chevron-left"></i>
                                </a>
                            </li>
                            
                            @{
                                var startPage = Math.Max(1, Model.CurrentPage - 2);
                                var endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
                            }
                            
                            @if (startPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="#" data-page="1">1</a>
                                </li>
                                @if (startPage > 2)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                            }
                            
                            @for (var i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="#" data-page="@i">@i</a>
                                </li>
                            }
                            
                            @if (endPage < Model.TotalPages)
                            {
                                @if (endPage < Model.TotalPages - 1)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                                <li class="page-item">
                                    <a class="page-link" href="#" data-page="@Model.TotalPages">@Model.TotalPages</a>
                                </li>
                            }
                            
                            <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                                <a class="page-link" href="#" data-page="@(Model.CurrentPage + 1)">
                                    <i class="bi bi-chevron-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .enhanced-datatable {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 20px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }
    
    .datatable-header, .datatable-footer {
        padding: 1.5rem;
    }
    
    .datatable-footer {
        background-color: #f8f9fa;
        border-top: 1px solid #e9ecef;
    }
    
    .search-container .input-group-text {
        background-color: #f8f9fa;
        border-right: none;
    }
    
    .search-container .form-control {
        border-left: none;
        background-color: #f8f9fa;
    }
    
    .search-container .form-control:focus {
        background-color: white;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    .table th.sortable {
        cursor: pointer;
        user-select: none;
    }
    
    .table th.sortable:hover {
        background-color: #e9ecef;
    }
    
    .filter-panel {
        margin-bottom: 1rem;
    }
    
    .filter-panel .card {
        border: 1px solid #e9ecef;
        box-shadow: none;
    }
    
    .view-mode-btn.active {
        background-color: #007bff;
        color: white;
    }
    
    .datatable-info {
        color: #6c757d;
        font-size: 0.875rem;
    }
    
    .pagination .page-link {
        color: #6c757d;
        border: 1px solid #dee2e6;
    }
    
    .pagination .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
    }
    
    .pagination .page-link:hover {
        color: #0056b3;
        background-color: #e9ecef;
        border-color: #dee2e6;
    }
</style>

<script>
    $(document).ready(function() {
        const tableId = '@tableId';
        const $table = $(`#${tableId}`);
        const $container = $table.closest('.enhanced-datatable');
        
        // Search functionality
        $(`#${tableId}_search`).on('input', debounce(function() {
            performSearch();
        }, 300));
        
        // Filter toggle
        $(`#${tableId}_filterToggle`).click(function() {
            $(`#${tableId}_filters`).slideToggle();
        });
        
        // Clear filters
        $(`#${tableId}_clearFilters`).click(function() {
            $(`#${tableId}_filters input, #${tableId}_filters select`).val('');
            performSearch();
        });
        
        // Apply filters
        $(`#${tableId}_applyFilters`).click(function() {
            performSearch();
        });
        
        // Sorting
        $table.find('th.sortable').click(function() {
            const column = $(this).data('column');
            const currentSort = '@Model.SortBy';
            const currentDirection = '@Model.SortDirection';
            
            let newDirection = 'asc';
            if (column === currentSort && currentDirection === 'asc') {
                newDirection = 'desc';
            }
            
            performSearch(column, newDirection);
        });
        
        // Pagination
        $container.on('click', '.pagination a', function(e) {
            e.preventDefault();
            const page = $(this).data('page');
            if (page) {
                performSearch(null, null, page);
            }
        });
        
        // View mode toggle
        $container.find('[data-view-mode]').click(function() {
            const mode = $(this).data('view-mode');
            $container.find('[data-view-mode]').removeClass('active');
            $(this).addClass('active');
            // Implementation for view mode change
        });
        
        // Select all functionality
        $(`#${tableId}_selectAll`).change(function() {
            const isChecked = $(this).is(':checked');
            $table.find('tbody input[type="checkbox"]').prop('checked', isChecked);
        });
        
        // Individual checkbox change
        $table.on('change', 'tbody input[type="checkbox"]', function() {
            const totalCheckboxes = $table.find('tbody input[type="checkbox"]').length;
            const checkedCheckboxes = $table.find('tbody input[type="checkbox"]:checked').length;
            
            $(`#${tableId}_selectAll`).prop('checked', totalCheckboxes === checkedCheckboxes);
        });
        
        // Export functionality
        $container.on('click', '[data-export]', function(e) {
            e.preventDefault();
            const format = $(this).data('export');
            performExport(format);
        });
        
        function performSearch(sortBy = null, sortDirection = null, page = null) {
            const searchData = {
                searchTerm: $(`#${tableId}_search`).val(),
                sortBy: sortBy || '@Model.SortBy',
                sortDirection: sortDirection || '@Model.SortDirection',
                currentPage: page || 1,
                pageSize: @Model.PageSize,
                filters: {}
            };
            
            // Collect filter values
            $(`#${tableId}_filters input, #${tableId}_filters select`).each(function() {
                const name = $(this).attr('name');
                const value = $(this).val();
                if (name && value) {
                    searchData.filters[name] = value;
                }
            });
            
            // Make AJAX request to refresh table
            window.location.search = $.param(searchData);
        }
        
        function performExport(format) {
            const searchData = {
                searchTerm: $(`#${tableId}_search`).val(),
                format: format,
                filters: {}
            };
            
            // Collect filter values
            $(`#${tableId}_filters input, #${tableId}_filters select`).each(function() {
                const name = $(this).attr('name');
                const value = $(this).val();
                if (name && value) {
                    searchData.filters[name] = value;
                }
            });
            
            // Create download link
            const url = window.location.pathname + '/Export?' + $.param(searchData);
            window.open(url, '_blank');
        }
        
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    });
</script>
