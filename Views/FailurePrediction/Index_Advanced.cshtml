@using FEENALOoFINALE.Models
@model IEnumerable<FEENALOoFINALE.Models.FailurePrediction>

@{
    ViewData["Title"] = "AI-Powered Failure Prediction Suite";
}

<style>
    .prediction-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 20px;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }
    
    .prediction-header::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -50%;
        width: 200%;
        height: 200%;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100%" height="100%" fill="url(%23grid)"/></svg>');
        opacity: 0.3;
    }
    
    .header-content {
        position: relative;
        z-index: 2;
    }
    
    .ai-control-panel {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        border: 1px solid #dee2e6;
    }
    
    .prediction-metrics {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        text-align: center;
        border-left: 4px solid;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }
    
    .metric-card.high-risk { border-left-color: #dc3545; }
    .metric-card.medium-risk { border-left-color: #ffc107; }
    .metric-card.low-risk { border-left-color: #28a745; }
    .metric-card.total { border-left-color: #007bff; }
    
    .metric-value {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0;
        background: linear-gradient(135deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .metric-label {
        color: #6c757d;
        font-size: 0.9rem;
        margin-top: 0.5rem;
    }
    
    .ai-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        border: none;
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    .ai-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    }
    
    .ai-btn {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 25px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }
    
    .ai-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        color: white;
    }
    
    .realtime-indicator {
        position: fixed;
        top: 20px;
        right: 20px;
        background: #28a745;
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.8rem;
        z-index: 1000;
        animation: pulse-animation 2s infinite;
    }
    
    @@keyframes pulse-animation {
        0% { opacity: 1; }
        50% { opacity: 0.7; }
        100% { opacity: 1; }
    }
</style>

<div class="realtime-indicator" id="realtimeStatus">
    <i class="bi bi-wifi"></i> Real-time Monitoring Active
</div>

<div class="prediction-header">
    <div class="header-content">
        <h1 class="display-4 mb-3">
            <i class="bi bi-robot me-3"></i>
            AI-Powered Failure Prediction Suite
        </h1>
        <p class="lead mb-0">Advanced machine learning algorithms for predictive maintenance and equipment failure analysis</p>
    </div>
</div>

<!-- Prediction Metrics Dashboard -->
<div class="prediction-metrics">
    <div class="metric-card total">
        <h3 class="metric-value" id="totalPredictions">@Model.Count()</h3>
        <p class="metric-label">Total Predictions</p>
    </div>
    <div class="metric-card high-risk">
        <h3 class="metric-value" id="highRiskPredictions">@Model.Count(p => p.Status == PredictionStatus.High)</h3>
        <p class="metric-label">High Risk</p>
    </div>
    <div class="metric-card medium-risk">
        <h3 class="metric-value" id="mediumRiskPredictions">@Model.Count(p => p.Status == PredictionStatus.Medium)</h3>
        <p class="metric-label">Medium Risk</p>
    </div>
    <div class="metric-card low-risk">
        <h3 class="metric-value" id="lowRiskPredictions">@Model.Count(p => p.Status == PredictionStatus.Low)</h3>
        <p class="metric-label">Low Risk</p>
    </div>
</div>

<!-- AI Control Panel -->
<div class="ai-control-panel">
    <div class="row align-items-center">
        <div class="col-md-6">
            <h5><i class="bi bi-cpu me-2"></i>AI Analysis Controls</h5>
            <p class="text-muted mb-0">Advanced machine learning operations</p>
        </div>
        <div class="col-md-6 text-end">
            <button class="ai-btn me-2" onclick="runAIAnalysis()">
                <i class="bi bi-robot me-2"></i>Run Full AI Analysis
            </button>
            <button class="ai-btn me-2" onclick="generatePredictions()">
                <i class="bi bi-lightning me-2"></i>Generate Predictions
            </button>
            <button class="ai-btn" onclick="startRealTimeMonitoring()">
                <i class="bi bi-broadcast me-2"></i>Real-time Monitor
            </button>
        </div>
    </div>
</div>

<!-- Simple predictions display for now -->
<div class="ai-card">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">
            <i class="bi bi-table me-2"></i>
            Current Failure Predictions
        </h5>
    </div>
    <div class="card-body">
        @if (Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Equipment</th>
                            <th>Predicted Failure</th>
                            <th>Confidence</th>
                            <th>Risk Level</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var prediction in Model)
                        {
                            <tr>
                                <td>@(prediction.Equipment?.EquipmentType?.EquipmentTypeName ?? "Unknown")</td>
                                <td>@prediction.PredictedFailureDate.ToString("MMM dd, yyyy")</td>
                                <td>@prediction.ConfidenceLevel%</td>
                                <td>
                                    <span class="badge bg-@(prediction.Status == PredictionStatus.High ? "danger" : prediction.Status == PredictionStatus.Medium ? "warning" : "success")">
                                        @prediction.Status
                                    </span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary" onclick="aiAnalyze(@prediction.EquipmentId)">
                                        <i class="bi bi-robot"></i> AI Analyze
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-robot" style="font-size: 3rem; color: #6c757d;"></i>
                <h5 class="mt-3">No Predictions Available</h5>
                <p class="text-muted">Click "Generate Predictions" to create AI-powered failure predictions.</p>
            </div>
        }
    </div>
</div>

<script>
async function runAIAnalysis() {
    Swal.fire({
        title: 'Running Advanced AI Analysis...',
        html: 'Processing equipment data with machine learning algorithms...',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
            
            fetch('/FailurePrediction/AIAnalysis')
                .then(response => response.json())
                .then(data => {
                    Swal.fire({
                        icon: 'success',
                        title: 'AI Analysis Complete',
                        html: `
                            <div class="text-start">
                                <h6>Analysis Results:</h6>
                                <ul>
                                    <li>Total Equipment Analyzed: ${data.totalEquipment}</li>
                                    <li>High Risk Equipment: ${data.highRiskEquipment}</li>
                                    <li>Medium Risk Equipment: ${data.mediumRiskEquipment}</li>
                                    <li>Low Risk Equipment: ${data.lowRiskEquipment}</li>
                                </ul>
                            </div>
                        `,
                        showConfirmButton: true,
                        width: '600px'
                    });
                })
                .catch(error => {
                    Swal.fire('Error', 'Failed to run AI analysis', 'error');
                });
        }
    });
}

async function generatePredictions() {
    Swal.fire({
        title: 'Generating AI Predictions...',
        text: 'Creating new failure predictions for all active equipment...',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
            
            fetch('/FailurePrediction/GeneratePredictions', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Predictions Generated',
                            text: `Successfully generated ${data.predictionsGenerated} new predictions.`,
                            confirmButtonText: 'Refresh Page'
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire('Error', 'Failed to generate predictions', 'error');
                    }
                })
                .catch(error => {
                    Swal.fire('Error', 'Failed to generate predictions', 'error');
                });
        }
    });
}

function aiAnalyze(equipmentId) {
    Swal.fire({
        title: 'AI Equipment Analysis',
        html: 'Analyzing equipment with advanced algorithms...',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
            setTimeout(() => {
                const mockData = {
                    riskScore: Math.floor(Math.random() * 100),
                    healthScore: Math.floor(Math.random() * 100),
                    recommendations: [
                        'Schedule preventive maintenance',
                        'Monitor vibration levels',
                        'Check lubrication system',
                        'Inspect electrical connections'
                    ]
                };
                
                Swal.fire({
                    icon: 'info',
                    title: 'Equipment Analysis Results',
                    html: `
                        <div class="text-start">
                            <h6>Risk Assessment:</h6>
                            <div class="progress mb-2">
                                <div class="progress-bar ${mockData.riskScore > 70 ? 'bg-danger' : mockData.riskScore > 40 ? 'bg-warning' : 'bg-success'}" 
                                     style="width: ${mockData.riskScore}%">${mockData.riskScore}%</div>
                            </div>
                            <h6>Health Score:</h6>
                            <div class="progress mb-3">
                                <div class="progress-bar bg-success" style="width: ${mockData.healthScore}%">${mockData.healthScore}%</div>
                            </div>
                            <h6>AI Recommendations:</h6>
                            <ul>
                                ${mockData.recommendations.map(rec => `<li>${rec}</li>`).join('')}
                            </ul>
                        </div>
                    `,
                    showConfirmButton: true
                });
            }, 2000);
        }
    });
}

function startRealTimeMonitoring() {
    const indicator = document.getElementById('realtimeStatus');
    indicator.style.background = '#ffc107';
    indicator.innerHTML = '<i class="bi bi-hourglass-split"></i> Processing...';
    
    setTimeout(() => {
        indicator.style.background = '#28a745';
        indicator.innerHTML = '<i class="bi bi-wifi"></i> Real-time Monitoring Active';
        Swal.fire('Success', 'Real-time monitoring activated!', 'success');
    }, 2000);
}
</script>
